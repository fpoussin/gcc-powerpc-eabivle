diff --git a/include/opcode/ppc.h b/include/opcode/ppc.h
index c797fa5..71233fe 100644
--- a/include/opcode/ppc.h
+++ b/include/opcode/ppc.h
@@ -66,6 +66,8 @@ extern const struct powerpc_opcode powerpc_opcodes[];
 extern const int powerpc_num_opcodes;
 extern const struct powerpc_opcode vle_opcodes[];
 extern const int vle_num_opcodes;
+extern const struct powerpc_opcode spe2_opcodes[];
+extern const int spe2_num_opcodes;
 
 /* Values defined for the flags field of a struct powerpc_opcode.  */
 
@@ -190,11 +192,23 @@ extern const int vle_num_opcodes;
 /* Opcode is only supported by Power8 architecture.  */
 #define PPC_OPCODE_POWER8     0x2000000000ull
 
+/* Opcode is supported by PowerPC LSP */
+#define PPC_OPCODE_LSP        0x8000000000000000ull
+
 /* Opcode which is supported by the Hardware Transactional Memory extension.  */
 /* Currently, this is the same as the POWER8 mask.  If another cpu comes out
    that isn't a superset of POWER8, we can define this to its own mask.  */
 #define PPC_OPCODE_HTM        PPC_OPCODE_POWER8
 
+  /* Opcode is supported by e200z4.  */
+#define PPC_OPCODE_E200Z4     0x80000000000ull
+
+/* Opcode is only supported by Freescale SPE2 APU.  */
+#define PPC_OPCODE_SPE2       0x4000000000000000ull
+
+/* Opcode is supported by EFS2.  */
+#define PPC_OPCODE_EFS2	      0x2000000000000000ull
+
 /* A macro to extract the major opcode from an instruction.  */
 #define PPC_OP(i) (((i) >> 26) & 0x3f)
 
@@ -206,6 +220,12 @@ extern const int vle_num_opcodes;
 
 /* A macro to convert a VLE opcode to a VLE opcode segment.  */
 #define VLE_OP_TO_SEG(i) ((i) >> 1)
+
+/* A macro to extract the extended opcode from a SPE2 instruction.  */
+#define SPE2_XOP(i) ((i) & 0x7ff)
+
+/* A macro to convert a SPE2 extended opcode to a SPE2 xopcode segment.  */
+#define SPE2_XOP_TO_SEG(i) ((i) >> 7)
 
 /* The operands table is an array of struct powerpc_operand.  */
 
diff --git a/opcodes/ppc-opc.c b/opcodes/ppc-opc.c
index a5cfe1a..be3efbc 100644
--- a/opcodes/ppc-opc.c
+++ b/opcodes/ppc-opc.c
@@ -115,7 +115,9 @@ static unsigned long insert_vleui (unsigned long, long, ppc_cpu_t, const char **
 static long extract_vleui (unsigned long, ppc_cpu_t, int *);
 static unsigned long insert_vleil (unsigned long, long, ppc_cpu_t, const char **);
 static long extract_vleil (unsigned long, ppc_cpu_t, int *);
-
+static unsigned long insert_off_spe2 (unsigned long, long, ppc_cpu_t, const char **);
+static unsigned long insert_Ddd (unsigned long, long, ppc_cpu_t, const char **);
+
 /* The operands table.
 
    The fields are bitm, shift, insert, extract, flags.
@@ -587,6 +589,8 @@ const struct powerpc_operand powerpc_operands[] =
 
   /* The SH field of the tlbwe instruction, which is optional.  */
 #define SHO SH6 + 1
+  /* The ELEV field in an ESC form instruction.  */
+#define ELEV SHO
   { 0x1f, 11, NULL, NULL, PPC_OPERAND_OPTIONAL },
 
   /* The SI field in a D form instruction.  */
@@ -702,6 +706,8 @@ const struct powerpc_operand powerpc_operands[] =
 
   /* The SIX field in a VX form instruction.  */
 #define SIX UIMM3 + 1
+  /* The MMMM field in a VX form instruction for SPE2  */
+#define MMMM SIX
   { 0xf, 11, NULL, NULL, 0 },
 
   /* The PS field in a VX form instruction.  */
@@ -726,6 +732,8 @@ const struct powerpc_operand powerpc_operands[] =
 
   /* The WS field.  */
 #define WS EVUIMM_8 + 1
+  /* The NNN field in a VX form instruction for SPE2  */
+#define NNN WS
   { 0x7, 11, NULL, NULL, 0 },
 
   /* PowerPC paired singles extensions.  */
@@ -866,6 +874,25 @@ const struct powerpc_operand powerpc_operands[] =
 
 #define ERAT_T UIM + 1
   { 0x7, 21, NULL, NULL, 0 },
+
+#define VX_OFF ERAT_T + 1
+  { 0x3, 0, NULL, NULL, 0 },
+  
+#define VX_OFF_SPE2 VX_OFF + 1
+  { 0x7, 0, insert_off_spe2, NULL, 0 },
+
+#define BBB VX_OFF_SPE2 + 1
+  { 0x7, 13, NULL, NULL, 0 },
+  
+#define DDD BBB + 1
+  { 0x3, 11, insert_Ddd, NULL, 0 },  
+
+#define DD DDD + 1
+  { 0x3, 11, NULL, NULL, 0 },
+
+#define HH DD + 1
+  { 0x3, 13, NULL, NULL, 0 },  
+  
 };
 
 const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)
@@ -2103,6 +2130,37 @@ extract_vleil (unsigned long insn,
   return ((insn >> 5) & 0xf800) | (insn & 0x7ff);
 }
 
+static unsigned long
+insert_off_spe2 (unsigned long insn,
+           long value,
+           ppc_cpu_t dialect ATTRIBUTE_UNUSED,
+           const char **errmsg)
+{
+  if (value > 0 && value <= 0x7)
+    return insn | (value & 0x7);
+  else
+    {
+    *errmsg = _("invalid offset");
+    return 0;
+    }
+}
+
+static unsigned long
+insert_Ddd (unsigned long insn,
+           long value,
+           ppc_cpu_t dialect ATTRIBUTE_UNUSED,
+           const char **errmsg)
+{
+  if (value >= 0 && value <= 0x7)
+    return insn | ((value & 0x2) << 11) | ((value & 0x4) >> 2);
+  else
+    {
+    *errmsg = _("invalid Ddd value");
+    return 0;
+    }
+}
+
+
 
 /* Macros used to form opcodes.  */
 
@@ -2180,6 +2238,11 @@ extract_vleil (unsigned long insn,
                                     | ((lk) & 1)
 #define EBD15BI_MASK  0xfff30001
 
+/* A ESC form instruction.  */
+#define ESC(op, elev, xop) (OP (op) | ((((unsigned long)(elev)) & 0x1f) << 11) | ((((unsigned long)(xop)) & 0x3ff) << 1))
+#define ESC_MASK (OP_MASK | (((unsigned long)0x3ff) << 16) | (((unsigned long)0x3ff) << 1) | 1)
+
+
 /* A BD24 form instruction.  */
 #define BD24(op, aa, lk) (OP (op) | ((((unsigned long)(aa)) & 1) << 25) | ((lk) & 1))
 #define BD24_MASK BD24 (0x3f, 1, 1)
@@ -2321,6 +2384,44 @@ extract_vleil (unsigned long insn,
 /* The mask for an VX form instruction.  */
 #define VX_MASK	VX(0x3f, 0x7ff)
 
+/* A VX LSP form instruction.  */
+#define VX_LSP(op, xop) (OP (op) | (((unsigned long)(xop)) & 0xffff))
+
+/* The mask for an VX LSP form instruction.  */
+#define VX_LSP_MASK	VX_LSP(0x3f, 0xffff)
+#define VX_LSP_OFF_MASK	VX_LSP(0x3f, 0x7fc)
+
+/* Additional format of VX SPE2 form instruction.   */
+#define VX_RA_CONST(op, xop, bits11_15) (OP (op) | (((unsigned long)(bits11_15) & 0x1f) << 16) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_RA_CONST_MASK VX_RA_CONST(0x3f, 0x7ff, 0x1f)
+
+#define VX_RB_CONST(op, xop, bits16_20) (OP (op) | (((unsigned long)(bits16_20) & 0x1f) << 11) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_RB_CONST_MASK VX_RB_CONST(0x3f, 0x7ff, 0x1f)
+
+#define VX_OFF_SPE2_MASK VX(0x3f, 0x7f8)
+
+#define VX_SPE_CRFD(op, xop, bits9_10) (OP (op) | (((unsigned long)(bits9_10) & 0x3) << 21) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE_CRFD_MASK VX_SPE_CRFD(0x3f, 0x7ff, 0x3)
+
+#define VX_SPE2_CLR(op, xop, bit16) (OP (op) | (((unsigned long)(bit16) & 0x1) << 15) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE2_CLR_MASK VX_SPE2_CLR(0x3f, 0x7ff, 0x1)
+
+#define VX_SPE2_SPLATB(op, xop, bits19_20) (OP (op) | (((unsigned long)(bits19_20) & 0x3) << 11) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE2_SPLATB_MASK VX_SPE2_SPLATB(0x3f, 0x7ff, 0x3)
+
+#define VX_SPE2_OCTET(op, xop, bits16_17) (OP (op) | (((unsigned long)(bits16_17) & 0x3) << 14) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE2_OCTET_MASK VX_SPE2_OCTET(0x3f, 0x7ff, 0x7)
+
+#define VX_SPE2_DDHH(op, xop, bit16) (OP (op) | (((unsigned long)(bit16) & 0x1) << 15) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE2_DDHH_MASK VX_SPE2_DDHH(0x3f, 0x7ff, 0x1)
+
+#define VX_SPE2_HH(op, xop, bit16, bits19_20) (OP (op) |(((unsigned long)(bit16) & 0x1) << 15) |  (((unsigned long)(bits19_20) & 0x3) << 11) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE2_HH_MASK VX_SPE2_HH(0x3f, 0x7ff, 0x1, 0x3)
+
+
+#define VX_SPE2_EVMAR(op, xop) (OP (op) | ((unsigned long)(0x1) << 11) | (((unsigned long)(xop)) & 0x7ff))
+#define VX_SPE2_EVMAR_MASK (VX_SPE2_EVMAR(0x3f, 0x7ff) | ((unsigned long)(0x1) << 11))
+
 /* A VX_MASK with the VA field fixed.  */
 #define VXVA_MASK (VX_MASK | (0x1f << 16))
 
@@ -2363,6 +2464,11 @@ extract_vleil (unsigned long insn,
 /* An X form instruction.  */
 #define X(op, xop) (OP (op) | ((((unsigned long)(xop)) & 0x3ff) << 1))
 
+/* An XMPU form instruction. Freescale MPU instructions */
+#define XMPU(op, xop) (OP (op) | (0x1 << 25) | ((((unsigned long)(xop)) & 0x3ff) << 1))
+#define XMPU_MASK XMPU(0x3f, 0x3ff)
+
+
 /* An EX form instruction.  */
 #define EX(op, xop) (OP (op) | (((unsigned long)(xop)) & 0x7ff))
 
@@ -2634,6 +2740,14 @@ extract_vleil (unsigned long insn,
 #define APU_RT_MASK (APU_MASK | RT_MASK)
 #define APU_RA_MASK (APU_MASK | RA_MASK)
 
+/* A LSP form instruction.  */
+#define LSP(op, xop) (OP (op) | (((unsigned long)(xop)) & 0x7fful))
+
+/* A VLE Interrupt handler instruction */
+
+#define OP_VINT_D8(op, xop, yop) (OP (op) | ((((unsigned long)(xop)) & 0x1f) << 21) | ((((unsigned long)(yop)) & 0xff) << 8))
+#define OP_VINT_D8_MASK OP_VINT_D8(0x3F,0x1F,0xFF)
+
 /* The BO encodings used in extended conditional branch mnemonics.  */
 #define BODNZF	(0x0)
 #define BODNZFP	(0x1)
@@ -2739,8 +2853,10 @@ extract_vleil (unsigned long insn,
 #define NO371	PPC_OPCODE_BOOKE | PPC_OPCODE_PPCPS | PPC_OPCODE_EFS | PPC_OPCODE_VLE
 #define PPCE300 PPC_OPCODE_E300
 #define PPCSPE	PPC_OPCODE_SPE | PPC_OPCODE_VLE
+#define PPCSPE2 PPC_OPCODE_SPE2
 #define PPCISEL PPC_OPCODE_ISEL | PPC_OPCODE_VLE
 #define PPCEFS	PPC_OPCODE_EFS | PPC_OPCODE_VLE
+#define PPCEFS2 PPC_OPCODE_EFS | PPC_OPCODE_VLE
 #define PPCBRLK PPC_OPCODE_BRLOCK
 #define PPCPMR	PPC_OPCODE_PMR
 #define PPCTMR  PPC_OPCODE_TMR
@@ -2753,6 +2869,7 @@ extract_vleil (unsigned long insn,
 #define E500	PPC_OPCODE_E500
 #define E6500	PPC_OPCODE_E6500
 #define PPCVLE  PPC_OPCODE_VLE
+#define PPCLSP  PPC_OPCODE_LSP
 #define PPCHTM  PPC_OPCODE_HTM
 
 /* The opcode table.
@@ -2994,16 +3112,16 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"evsubifw",	VX (4, 518),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, UIMM, RB}},
 {"evsubiw",	VX (4, 518),	VX_MASK,     PPCSPE,	PPCNONE,	{RS, RB, UIMM}},
 {"vcmpgtub",	VXR(4, 518,0),	VXR_MASK,    PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
-{"evabs",	VX (4, 520),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
+{"evabs",	VX_RB_CONST(4, 520, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
 {"vmuleub",	VX (4, 520),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
-{"evneg",	VX (4, 521),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
-{"evextsb",	VX (4, 522),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
+{"evneg",	VX_RB_CONST(4, 521, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
+{"evextsb",	VX_RB_CONST(4, 522, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
 {"vrfin",	VX (4, 522),	VXVA_MASK,   PPCVEC|PPCVLE, PPCNONE,	{VD, VB}},
-{"evextsh",	VX (4, 523),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
+{"evextsh",	VX_RB_CONST(4, 523, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
 {"evrndw",	VX (4, 524),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
 {"vspltb",	VX (4, 524),	VXUIMM4_MASK,PPCVEC|PPCVLE, PPCNONE,	{VD, VB, UIMM4}},
-{"evcntlzw",	VX (4, 525),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
-{"evcntlsw",	VX (4, 526),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
+{"evcntlzw",	VX_RB_CONST(4, 525, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
+{"evcntlsw",	VX_RB_CONST(4, 526, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
 {"vupkhsb",	VX (4, 526),	VXVA_MASK,   PPCVEC|PPCVLE, PPCNONE,	{VD, VB}},
 {"brinc",	VX (4, 527),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"ps_abs",	XRC(4, 264,0),	XRA_MASK,    PPCPS,	PPCNONE,	{FRT, FRB}},
@@ -3026,18 +3144,18 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"evslw",	VX (4, 548),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evslwi",	VX (4, 550),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, EVUIMM}},
 {"evrlw",	VX (4, 552),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
-{"evsplati",	VX (4, 553),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, SIMM}},
+{"evsplati",	VX_RB_CONST(4, 553, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, SIMM}},
 {"evrlwi",	VX (4, 554),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, EVUIMM}},
-{"evsplatfi",	VX (4, 555),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, SIMM}},
+{"evsplatfi",	VX_RB_CONST(4, 555, 0),	VX_RB_CONST_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, SIMM}},
 {"evmergehi",	VX (4, 556),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmergelo",	VX (4, 557),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmergehilo",	VX (4, 558),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmergelohi",	VX (4, 559),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
-{"evcmpgtu",	VX (4, 560),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
-{"evcmpgts",	VX (4, 561),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
-{"evcmpltu",	VX (4, 562),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
-{"evcmplts",	VX (4, 563),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
-{"evcmpeq",	VX (4, 564),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
+{"evcmpgtu",	VX_SPE_CRFD (4, 560, 0), VX_SPE_CRFD_MASK, PPCSPE|PPCVLE, PPCNONE, {CRFD, RA, RB}},
+{"evcmpgts",	VX_SPE_CRFD (4, 561, 0), VX_SPE_CRFD_MASK, PPCSPE|PPCVLE, PPCNONE, {CRFD, RA, RB}},
+{"evcmpltu",	VX_SPE_CRFD (4, 562, 0), VX_SPE_CRFD_MASK, PPCSPE|PPCVLE, PPCNONE, {CRFD, RA, RB}},
+{"evcmplts",	VX_SPE_CRFD (4, 563, 0), VX_SPE_CRFD_MASK, PPCSPE|PPCVLE, PPCNONE, {CRFD, RA, RB}},
+{"evcmpeq",	VX_SPE_CRFD (4, 564, 0), VX_SPE_CRFD_MASK, PPCSPE|PPCVLE, PPCNONE, {CRFD, RA, RB}},
 {"cget",	APU(4, 284,0),	APU_RA_MASK, PPC405,	PPCNONE,	{RT, FSL}},
 {"vadduhs",	VX (4, 576),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"vminuh",	VX (4, 578),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
@@ -3053,7 +3171,9 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"evfsadd",	VX (4, 640),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"vadduws",	VX (4, 640),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"evfssub",	VX (4, 641),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evfsmadd",	VX (4, 642),    VX_MASK,     PPCSPE|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"vminuw",	VX (4, 642),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
+{"evfsmsub",	VX (4, 643),    VX_MASK,     PPCSPE|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"evfsabs",	VX (4, 644),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
 {"vsrw",	VX (4, 644),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"evfsnabs",	VX (4, 645),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA}},
@@ -3062,7 +3182,9 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"vmuleuw",	VX (4, 648),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
 {"evfsmul",	VX (4, 648),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evfsdiv",	VX (4, 649),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evfsnmadd",	VX (4, 650),    VX_MASK,     PPCSPE|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"vrfip",	VX (4, 650),	VXVA_MASK,   PPCVEC|PPCVLE, PPCNONE,	{VD, VB}},
+{"evfsnmsub",	VX (4, 651),    VX_MASK,     PPCSPE|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"evfscmpgt",	VX (4, 652),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"vspltw",	VX (4, 652),	VXUIMM2_MASK,PPCVEC|PPCVLE, PPCNONE,	{VD, VB, UIMM2}},
 {"evfscmplt",	VX (4, 653),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
@@ -3083,29 +3205,40 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"evfststlt",	VX (4, 669),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"evfststeq",	VX (4, 670),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"cput",	APU(4, 348,0),	APU_RT_MASK, PPC405,	PPCNONE,	{RA, FSL}},
+{"efsmax",      VX (4, 688),    VX_MASK,     PPCEFS2|PPCVLE, PPCNONE,   {RD, RA, RB}},
+{"efsmin",      VX (4, 689),    VX_MASK,     PPCEFS2|PPCVLE, PPCNONE,   {RD, RA, RB}},
+{"efdmax",      VX (4, 696),    VX_MASK,     PPCEFS2|PPCVLE, PPCNONE,   {RD, RA, RB}},
+{"efdmin",      VX (4, 697),    VX_MASK,     PPCEFS2|PPCVLE, PPCNONE,   {RD, RA, RB}},
 {"efsadd",	VX (4, 704),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"efssub",	VX (4, 705),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"efsmadd",	VX (4, 706),    VX_MASK,     PPCEFS|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"vminud",	VX (4, 706),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"efsmsub",	VX (4, 707),    VX_MASK,     PPCEFS|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"efsabs",	VX (4, 708),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA}},
 {"vsr",		VX (4, 708),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"efsnabs",	VX (4, 709),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA}},
 {"efsneg",	VX (4, 710),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA}},
 {"vcmpgtfp",	VXR(4, 710,0),	VXR_MASK,    PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"vcmpgtud",	VXR(4, 711,0),	VXR_MASK,    PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"efssqrt",  VX_RB_CONST(4, 711, 0),    VX_RB_CONST_MASK,     PPCEFS2|PPCVLE, PPCNONE,   {RD, RA}},
 {"efsmul",	VX (4, 712),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"efsdiv",	VX (4, 713),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"efsnmadd",    VX (4, 714),    VX_MASK,     PPCEFS|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"vrfim",	VX (4, 714),	VXVA_MASK,   PPCVEC|PPCVLE, PPCNONE,	{VD, VB}},
+{"efsnmsub",    VX (4, 715),    VX_MASK,     PPCEFS|PPCVLE, PPCNONE,    {RS, RA, RB}},
 {"efscmpgt",	VX (4, 716),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efscmplt",	VX (4, 717),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efscmpeq",	VX (4, 718),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"vupklsh",	VX (4, 718),	VXVA_MASK,   PPCVEC|PPCVLE, PPCNONE,	{VD, VB}},
 {"efscfd",	VX (4, 719),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efscfui",	VX (4, 720),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efscfsi",	VX (4, 721),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efscfsi",	VX_RA_CONST(4, 721, 0), VX_RA_CONST_MASK,  PPCEFS|PPCVLE, PPCNONE, {RS, RB}},
+{"efscfh", 	VX_RA_CONST(4, 721, 4), VX_RA_CONST_MASK, PPCEFS2|PPCVLE, PPCNONE, {RD, RB}},
 {"efscfuf",	VX (4, 722),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efscfsf",	VX (4, 723),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efsctui",	VX (4, 724),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efsctsi",	VX (4, 725),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efsctsi",	VX_RA_CONST(4, 725, 0), VX_RA_CONST_MASK,  PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efscth",	VX_RA_CONST(4, 725, 4), VX_RA_CONST_MASK, PPCEFS2|PPCVLE, PPCNONE, {RD, RB}},
 {"efsctuf",	VX (4, 726),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efsctsf",	VX (4, 727),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efsctuiz",	VX (4, 728),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
@@ -3116,30 +3249,41 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"efststeq",	VX (4, 734),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efdadd",	VX (4, 736),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"efdsub",	VX (4, 737),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
-{"efdcfuid",	VX (4, 738),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efdcfsid",	VX (4, 739),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efdcfuid",	VX (4, 738),	VX_MASK,     E500|E500MC, PPCNONE,	{RS, RB}}, //moved to 752
+{"efdmadd",     VX (4, 738),    VX_MASK,     PPCEFS|PPCVLE, E500|E500MC,    {RD, RA, RB}},
+{"efdcfsid",	VX (4, 739),	VX_MASK,     E500|E500MC, PPCNONE,	{RS, RB}}, //moved to 753
+{"efdmsub",     VX (4, 739),    VX_MASK,     PPCEFS|PPCVLE, E500|E500MC,    {RD, RA, RB}},
 {"efdabs",	VX (4, 740),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA}},
 {"efdnabs",	VX (4, 741),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA}},
 {"efdneg",	VX (4, 742),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA}},
+{"efdsqrt",	VX_RB_CONST(4, 743, 0), VX_RB_CONST_MASK, PPCEFS2|PPCVLE, PPCNONE, {RD, RA}},
 {"efdmul",	VX (4, 744),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"efddiv",	VX (4, 745),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RA, RB}},
-{"efdctuidz",	VX (4, 746),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efdctsidz",	VX (4, 747),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efdctuidz",	VX (4, 746),	VX_MASK,     E500|E500MC, PPCNONE,	{RS, RB}}, //moved to 760
+{"efdnmadd",    VX (4, 746),    VX_MASK,     PPCEFS|PPCVLE, E500|E500MC,    {RD, RA, RB}},
+{"efdctsidz",	VX (4, 747),	VX_MASK,     E500|E500MC, PPCNONE,	{RS, RB}}, //moved to 762
+{"efdnmsub",    VX (4, 747),    VX_MASK,     PPCEFS|PPCVLE, E500|E500MC,    {RD, RA, RB}},
 {"efdcmpgt",	VX (4, 748),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efdcmplt",	VX (4, 749),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efdcmpeq",	VX (4, 750),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efdcfs",	VX (4, 751),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efdcfui",	VX (4, 752),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efdcfsi",	VX (4, 753),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efdcfui",	VX_RA_CONST(4, 752, 0),	VX_RA_CONST_MASK,     PPCEFS|PPCVLE, PPCNONE, {RS, RB}},
+{"efdcfuid",	VX_RA_CONST(4, 752, 1), VX_RA_CONST_MASK,     PPCEFS|PPCVLE, E500|E500MC, {RS, RB}}, //in acc EFP2_rev.1.4_spec
+{"efdcfsi",	VX_RA_CONST(4, 753, 0), VX_RA_CONST_MASK, PPCEFS|PPCVLE, PPCNONE, {RS, RB}},
+{"efdcfsid",	VX_RA_CONST(4, 753, 1),	VX_RA_CONST_MASK, PPCEFS|PPCVLE, E500|E500MC, {RS, RB}}, //in acc EFP2_rev.1.4_spec
+{"efdcfh",	VX_RA_CONST(4, 753, 4), VX_RA_CONST_MASK, PPCEFS2|PPCVLE, PPCNONE, {RD, RB}},
 {"efdcfuf",	VX (4, 754),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efdcfsf",	VX (4, 755),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efdctui",	VX (4, 756),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efdctsi",	VX (4, 757),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efdctsi",	VX_RA_CONST(4, 757, 0), VX_RA_CONST_MASK, PPCEFS|PPCVLE, PPCNONE, {RS, RB}},
+{"efdcth",	VX_RA_CONST(4, 757, 4), VX_RA_CONST_MASK, PPCEFS2|PPCVLE, PPCNONE, {RD, RB}},
 {"efdctuf",	VX (4, 758),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
 {"efdctsf",	VX (4, 759),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
-{"efdctuiz",	VX (4, 760),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efdctuiz",	VX_RA_CONST(4, 760, 0),	VX_RA_CONST_MASK,     PPCEFS|PPCVLE, PPCNONE, {RS, RB}},
+{"efdctuidz",	VX_RA_CONST(4, 760, 1),	VX_RA_CONST_MASK,     PPCEFS|PPCVLE, E500|E500MC, {RS, RB}}, //in acc EFP2_rev.1.4_spec
 {"ncput",	APU(4, 380,0),	APU_RT_MASK, PPC405,	PPCNONE,	{RA, FSL}},
-{"efdctsiz",	VX (4, 762),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{RS, RB}},
+{"efdctsiz",	VX_RA_CONST(4, 762, 0),	VX_RA_CONST_MASK,     PPCEFS|PPCVLE, PPCNONE, {RS, RB}},
+{"efdctsidz",	VX_RA_CONST(4, 762, 1),	VX_RA_CONST_MASK,     PPCEFS|PPCVLE, E500|E500MC, {RS, RB}}, //in acc EFP2_rev.1.4_spec
 {"efdtstgt",	VX (4, 764),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efdtstlt",	VX (4, 765),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
 {"efdtsteq",	VX (4, 766),	VX_MASK,     PPCEFS|PPCVLE, PPCNONE,	{CRFD, RA, RB}},
@@ -3263,6 +3407,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"bcdsub.",	VX (4,1089),	VXPS_MASK,   PPCVEC2,	    PPCNONE,	{VD, VA, VB, PS}},
 {"vavguh",	VX (4,1090),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"vabsduh",	VX (4,1091),	VX_MASK,     PPCVEC2,	PPCNONE,	{VD, VA, VB}},
+{"evmwlssf",  VX(4, 1091), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vandc",	VX (4,1092),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"vcmpequh.",	VXR(4,	70,1),	VXR_MASK,    PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"udi1fcm.",	APU(4, 547,0), APU_MASK, PPC405|PPC440, PPC476,		{URT, URA, URB}},
@@ -3271,6 +3416,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"vpmsumh",	VX (4,1096),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
 {"evmwlumi",	VX (4,1096),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"vminfp",	VX (4,1098),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
+{"evmwlsmf",  VX(4, 1099), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"evmwhumi",	VX (4,1100),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"vsro",	VX (4,1100),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"evmwhsmi",	VX (4,1101),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
@@ -3286,8 +3432,10 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"nmachhwo.",	XO (4,	46,1,1),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"ps_merge01",	XOPS(4,560,0),	XOPS_MASK,   PPCPS,	PPCNONE,	{FRT, FRA, FRB}},
 {"ps_merge01.",	XOPS(4,560,1),	XOPS_MASK,   PPCPS,	PPCNONE,	{FRT, FRA, FRB}},
+{"evmwlssfa", VX(4, 1123), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"evmwhssfa",	VX (4,1127),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwlumia",	VX (4,1128),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evmwlsmfa", VX(4, 1131),	VX_MASK,	   PPCSPE|PPCVLE, PPCNONE,	{RD, RA, RB}},
 {"evmwhumia",	VX (4,1132),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwhsmia",	VX (4,1133),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwhsmfa",	VX (4,1135),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
@@ -3366,21 +3514,33 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"evmwlusiaaw",	VX (4,1344),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwlssiaaw",	VX (4,1345),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"vavgsh",	VX (4,1346),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
+{"evmwlssfaaw", VX(4, 1347), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vorc",	VX (4,1348),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"evmwhusiaa", VX(4, 1348), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhssmaa", VX(4, 1349), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"udi5fcm.",	APU(4, 675,0), APU_MASK, PPC405|PPC440, PPC476,		{URT, URA, URB}},
 {"udi5fcm",	APU(4, 675,1), APU_MASK, PPC405|PPC440, PPC476,		{URT, URA, URB}},
+{"evmwhssfaa",	VX(4, 1351), 	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RD, RA, RB}},
 {"vncipher",	VX (4,1352),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
 {"evmwlumiaaw",	VX (4,1352),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"vncipherlast",VX (4,1353),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
 {"evmwlsmiaaw",	VX (4,1353),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evmwlsmfaaw", VX(4, 1355), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vbpermq",	VX (4,1356),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"evmwhumiaa", VX(4, 1356), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhsmiaa", VX(4, 1357), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vpksdus",	VX (4,1358),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"evmwhsmfaa", VX(4, 1359), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"evmwssfaa",	VX (4,1363),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"macchwo",	XO (4, 172,1,0),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"evmwumiaa",	VX (4,1368),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"macchwo.",	XO (4, 172,1,1),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"evmwsmiaa",	VX (4,1369),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwsmfaa",	VX (4,1371),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evmwhgumiaa", VX(4, 1380), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhgsmiaa", VX(4, 1381), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhgssfaa", VX(4, 1383), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhgsmfaa", VX(4, 1391), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"nmacchwo",	XO (4, 174,1,0),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"nmacchwo.",	XO (4, 174,1,1),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"evmheusianw",	VX (4,1408),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
@@ -3410,20 +3570,32 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"evmhogsmfan",	VX (4,1455),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwlusianw",	VX (4,1472),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwlssianw",	VX (4,1473),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evmwlssfanw", VX(4, 1475), VX_MASK, PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vsld",	VX (4,1476),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"evmwhusian", VX(4, 1476), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhssian", VX(4, 1477), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vcmpgefp.",	VXR(4, 454,1),	VXR_MASK,    PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
 {"udi7fcm.",	APU(4, 739,0), APU_MASK, PPC405|PPC440, PPC476,		{URT, URA, URB}},
 {"udi7fcm",	APU(4, 739,1), APU_MASK, PPC405|PPC440, PPC476,		{URT, URA, URB}},
+{"evmwhssfan", VX(4, 1479), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vsbox",	VX (4,1480),	VXVB_MASK,   PPCVEC2,	    PPCNONE,	{VD, VA}},
 {"evmwlumianw",	VX (4,1480),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwlsmianw",	VX (4,1481),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evmwlsmfanw", VX(4, 1483), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhumian", VX(4, 1484), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhsmian", VX(4, 1485), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"vpksdss",	VX (4,1486),	VX_MASK,     PPCVEC2,	    PPCNONE,	{VD, VA, VB}},
+{"evmwhsmfan", VX(4, 1487), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"evmwssfan",	VX (4,1491),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"macchwso",	XO (4, 236,1,0),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"evmwumian",	VX (4,1496),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"macchwso.",	XO (4, 236,1,1),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"evmwsmian",	VX (4,1497),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
 {"evmwsmfan",	VX (4,1499),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RA, RB}},
+{"evmwhgumian", VX(4, 1508), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhgsmian", VX(4, 1509), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhgssfan", VX(4, 1511), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
+{"evmwhgsmfan", VX(4, 1519), VX_MASK,	PPCSPE|PPCVLE, PPCNONE, {RD, RA, RB}},
 {"nmacchwso",	XO (4, 238,1,0),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"nmacchwso.",	XO (4, 238,1,1),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"vsububs",	VX (4,1536),	VX_MASK,     PPCVEC|PPCVLE, PPCNONE,	{VD, VA, VB}},
@@ -3485,7 +3657,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"maclhwsuo.",	XO (4, 460,1,1),XO_MASK,     MULHW|PPCVLE, PPCNONE,	{RT, RA, RB}},
 {"vclzd",	VX (4,1986),	VXVA_MASK,   PPCVEC2,	PPCNONE,	{VD, VB}},
 {"vpopcntd",	VX (4,1987),	VXVA_MASK,   PPCVEC2,	PPCNONE,	{VD, VB}},
-{"vcmpbfp.",	VXR(4, 966,1),	VXR_MASK,    PPCVEC,	PPCNONE,	{VD, VA, VB}},
+{"vcmpbfp.",	VXR(4, 966,1),	VXR_MASK,    PPCVEC|PPCVLE,	PPCNONE,	{VD, VA, VB}},
 {"udi15fcm.",	APU(4, 995,0),	APU_MASK,    PPC440,	PPC476,		{URT, URA, URB}},
 {"vcmpgtsd.",	VXR(4, 967,1),	VXR_MASK,    PPCVEC2,	PPCNONE,	{VD, VA, VB}},
 {"udi15fcm",	APU(4, 995,1),	APU_MASK,    PPC440,	PPC476,		{URT, URA, URB}},
@@ -4320,11 +4492,14 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"rldcr",	MDS(30,9,0),	MDS_MASK,    PPC64,	PPCNONE,	{RA, RS, RB, ME6}},
 {"rldcr.",	MDS(30,9,1),	MDS_MASK,    PPC64,	PPCNONE,	{RA, RS, RB, ME6}},
 
-{"cmpw",	XOPL(31,0,0),	XCMPL_MASK,  PPCCOM,	PPCNONE,	{OBF, RA, RB}},
+{"cmpw",	XOPL(31,0,0),	XCMPL_MASK,  PPCCOM|PPCVLE,	PPCNONE,	{OBF, RA, RB}},
 {"cmpd",	XOPL(31,0,1),	XCMPL_MASK,  PPC64,	PPCNONE,	{OBF, RA, RB}},
 {"cmp",		X(31,0),	XCMP_MASK,   PPC|PPCVLE, PPCNONE,	{BF, L, RA, RB}},
 {"cmp",		X(31,0),	XCMPL_MASK,  PWRCOM,	PPC,		{BF, RA, RB}},
 
+{"evlddepx",    VX (31, (799 << 1)),    VX_MASK,     PPCSPE|PPCVLE, PPCNONE,    {RT, RA, RB}},
+{"evstddepx",   VX (31, (927 << 1)),    VX_MASK,     PPCSPE|PPCVLE, PPCNONE,    {RT, RA, RB}},
+
 {"twlgt",	XTO(31,4,TOLGT), XTO_MASK,   PPCCOM|PPCVLE, PPCNONE,	{RA, RB}},
 {"tlgt",	XTO(31,4,TOLGT), XTO_MASK,   PWRCOM,	PPCNONE,	{RA, RB}},
 {"twllt",	XTO(31,4,TOLLT), XTO_MASK,   PPCCOM|PPCVLE, PPCNONE,	{RA, RB}},
@@ -4383,7 +4558,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"lxsiwzx",	X(31,12),	XX1_MASK,    PPCVSX2,	PPCNONE,	{XT6, RA0, RB}},
 
-{"isellt",	X(31,15),	X_MASK,      PPCISEL,	PPCNONE,	{RT, RA0, RB}},
+{"isellt",	X(31,15),	X_MASK,      PPCISEL|PPCVLE,	PPCNONE,	{RT, RA0, RB}},
 
 {"tlbilxlpid",	XTO(31,18,0),	XTO_MASK, E500MC|PPCA2,	PPCNONE,	{0}},
 {"tlbilxpid",	XTO(31,18,1),	XTO_MASK, E500MC|PPCA2,	PPCNONE,	{0}},
@@ -4413,8 +4588,8 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"cntlzw.",	XRC(31,26,1),	XRB_MASK,    PPCCOM|PPCVLE, PPCNONE,	{RA, RS}},
 {"cntlz.",	XRC(31,26,1),	XRB_MASK,    PWRCOM,	PPCNONE,	{RA, RS}},
 
-{"sld",		XRC(31,27,0),	X_MASK,      PPC64,	PPCNONE,	{RA, RS, RB}},
-{"sld.",	XRC(31,27,1),	X_MASK,      PPC64,	PPCNONE,	{RA, RS, RB}},
+{"sld",		XRC(31,27,0),	X_MASK,      PPC64|PPCVLE,	PPCNONE,	{RA, RS, RB}},
+{"sld.",	XRC(31,27,1),	X_MASK,      PPC64|PPCVLE,	PPCNONE,	{RA, RS, RB}},
 
 {"and",		XRC(31,28,0),	X_MASK,      COM|PPCVLE, PPCNONE,	{RA, RS, RB}},
 {"and.",	XRC(31,28,1),	X_MASK,	     COM|PPCVLE, PPCNONE,	{RA, RS, RB}},
@@ -4439,7 +4614,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"mviwsplt",	X(31,46),	X_MASK,      PPCVEC2,	PPCNONE,	{VD, RA, RB}},
 
-{"iselgt",	X(31,47),	X_MASK,      PPCISEL,	PPCNONE,	{RT, RA0, RB}},
+{"iselgt",	X(31,47),	X_MASK,      PPCISEL|PPCVLE,	PPCNONE,	{RT, RA0, RB}},
 
 {"lvewx",	X(31,71),	X_MASK,      PPCVEC|PPCVLE, PPCNONE,	{VD, RA0, RB}},
 
@@ -4447,7 +4622,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"lxsiwax",	X(31,76),	XX1_MASK,    PPCVSX2,	PPCNONE,	{XT6, RA0, RB}},
 
-{"iseleq",	X(31,79),	X_MASK,      PPCISEL,	PPCNONE,	{RT, RA0, RB}},
+{"iseleq",	X(31,79),	X_MASK,      PPCISEL|PPCVLE,	PPCNONE,	{RT, RA0, RB}},
 
 {"isel",	XISEL(31,15), XISEL_MASK, PPCISEL|TITAN|PPCVLE, PPCNONE, {RT, RA0, RB, CRB}},
 
@@ -4549,7 +4724,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
  
 {"popcntb",	X(31,122),	XRB_MASK,    POWER5|PPCVLE, PPCNONE,	{RA, RS}},
 
-{"not",		XRC(31,124,0),	X_MASK,      COM,	PPCNONE,	{RA, RS, RBS}},
+{"not",		XRC(31,124,0),	X_MASK,      COM|PPCVLE,	PPCNONE,	{RA, RS, RBS}},
 {"nor",		XRC(31,124,0),	X_MASK,	     COM|PPCVLE, PPCNONE,	{RA, RS, RB}},
 {"not.",	XRC(31,124,1),	X_MASK,      COM,	PPCNONE,	{RA, RS, RBS}},
 {"nor.",	XRC(31,124,1),	X_MASK,      COM|PPCVLE, PPCNONE,	{RA, RS, RB}},
@@ -4560,7 +4735,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
  
 {"dcbtstls",	X(31,134),	X_MASK,	     PPCCHLK|PPC476|TITAN|PPCVLE, PPCNONE, {CT, RA0, RB}},
 
-{"stvebx",	X(31,135),	X_MASK,      PPCVEC,	PPCNONE,	{VS, RA0, RB}},
+{"stvebx",	X(31,135),	X_MASK,      PPCVEC|PPCVLE,	PPCNONE,	{VS, RA0, RB}},
 {"stbfcmx",	APU(31,135,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
 
 {"subfe",	XO(31,136,0,0),	XO_MASK,     PPCCOM|PPCVLE, PPCNONE,	{RT, RA, RB}},
@@ -4578,7 +4753,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"msgsndp",	XRTRA(31,142,0,0), XRTRA_MASK, POWER8,	PPCNONE,	{RB}},
 {"dcbtstlse",	X(31,142),	X_MASK,      PPCCHLK,	E500MC,		{CT, RA0, RB}},
 
-{"mtcr",	XFXM(31,144,0xff,0), XRARB_MASK, COM,	PPCNONE,	{RS}},
+{"mtcr",	XFXM(31,144,0xff,0), XRARB_MASK, COM|PPCVLE,	PPCNONE,	{RS}},
 {"mtcrf",	XFXM(31,144,0,0), XFXFXM_MASK, COM|PPCVLE, PPCNONE,	{FXM, RS}},
 {"mtocrf",	XFXM(31,144,0,1), XFXFXM_MASK, COM|PPCVLE, PPCNONE,	{FXM, RS}},
 
@@ -4612,7 +4787,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
  
 {"dcbtls",	X(31,166),	X_MASK,	     PPCCHLK|PPC476|TITAN|PPCVLE, PPCNONE, {CT, RA0, RB}},
 
-{"stvehx",	X(31,167),	X_MASK,      PPCVEC,	PPCNONE,	{VS, RA0, RB}},
+{"stvehx",	X(31,167),	X_MASK,      PPCVEC|PPCVLE,	PPCNONE,	{VS, RA0, RB}},
 {"sthfcmx",	APU(31,167,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
 
 {"msgclrp",	XRTRA(31,174,0,0), XRTRA_MASK, POWER8,	PPCNONE,	{RB}},
@@ -4640,7 +4815,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"icblq.",	XRC(31,198,1),	X_MASK,      E6500,	PPCNONE,	{CT, RA0, RB}},
 
-{"stvewx",	X(31,199),	X_MASK,      PPCVEC,	PPCNONE,	{VS, RA0, RB}},
+{"stvewx",	X(31,199),	X_MASK,      PPCVEC|PPCVLE,	PPCNONE,	{VS, RA0, RB}},
 {"stwfcmx",	APU(31,199,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
 
 {"subfze",	XO(31,200,0,0),	XORB_MASK,   PPCCOM|PPCVLE, PPCNONE,	{RT, RA}},
@@ -4843,13 +5020,14 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mftid",	XSPR(31,339, 17), XSPR_MASK, POWER,	PPCNONE,	{RT}},
 {"mfdsisr",	XSPR(31,339, 18), XSPR_MASK, COM,	TITAN,  	{RT}},
 {"mfdar",	XSPR(31,339, 19), XSPR_MASK, COM,	TITAN,  	{RT}},
-{"mfdec",	XSPR(31,339, 22), XSPR_MASK, MFDEC2,	MFDEC1,		{RT}},
+{"mfdec",	XSPR(31,339, 22), XSPR_MASK, MFDEC2|PPCVLE,	MFDEC1,		{RT}},
 {"mfsdr0",	XSPR(31,339, 24), XSPR_MASK, POWER,	PPCNONE,	{RT}},
 {"mfsdr1",	XSPR(31,339, 25), XSPR_MASK, COM,	TITAN,  	{RT}},
-{"mfsrr0",	XSPR(31,339, 26), XSPR_MASK, COM,	PPCNONE,	{RT}},
-{"mfsrr1",	XSPR(31,339, 27), XSPR_MASK, COM,	PPCNONE,	{RT}},
+{"mfsrr0",	XSPR(31,339, 26), XSPR_MASK, COM|PPCVLE,	PPCNONE,	{RT}},
+{"mfsrr1",	XSPR(31,339, 27), XSPR_MASK, COM|PPCVLE,	PPCNONE,	{RT}},
 {"mfcfar",	XSPR(31,339, 28), XSPR_MASK, POWER6,	PPCNONE,	{RT}},
 {"mfpid",	XSPR(31,339, 48), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RT}},
+{"mfdecar",	XSPR(31,339, 54), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RT}},
 {"mfcsrr0",	XSPR(31,339, 58), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RT}},
 {"mfcsrr1",	XSPR(31,339, 59), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RT}},
 {"mfdear",	XSPR(31,339, 61), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RT}},
@@ -4922,27 +5100,47 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mfspefscr",	XSPR(31,339,512), XSPR_MASK, PPCSPE,	PPCNONE,	{RT}},
 {"mfbbear",	XSPR(31,339,513), XSPR_MASK, PPCBRLK,	PPCNONE,	{RT}},
 {"mfbbtar",	XSPR(31,339,514), XSPR_MASK, PPCBRLK,	PPCNONE,	{RT}},
+{"mfl1cfg0",	XSPR(31,339,515), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfl1cfg1",	XSPR(31,339,516), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfivor32",	XSPR(31,339,528), XSPR_MASK, PPCSPE,	PPCNONE,	{RT}},
 {"mfibatu",	XSPR(31,339,528), XSPRBAT_MASK, PPC,	TITAN,  	{RT, SPRBAT}},
 {"mfivor33",	XSPR(31,339,529), XSPR_MASK, PPCSPE,	PPCNONE,	{RT}},
 {"mfibatl",	XSPR(31,339,529), XSPRBAT_MASK, PPC,	TITAN,  	{RT, SPRBAT}},
 {"mfivor34",	XSPR(31,339,530), XSPR_MASK, PPCSPE,	PPCNONE,	{RT}},
-{"mfivor35",	XSPR(31,339,531), XSPR_MASK, PPCPMR,	PPCNONE,	{RT}},
+{"mfivor35",	XSPR(31,339,531), XSPR_MASK, PPCPMR|PPCVLE,	PPCNONE,	{RT}},
 {"mfdbatu",	XSPR(31,339,536), XSPRBAT_MASK, PPC,	TITAN,  	{RT, SPRBAT}},
 {"mfdbatl",	XSPR(31,339,537), XSPRBAT_MASK, PPC,	TITAN,  	{RT, SPRBAT}},
 {"mfic_cst",	XSPR(31,339,560), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mfctxcr",	XSPR(31,339,560), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfic_adr",	XSPR(31,339,561), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mfdbcr3",	XSPR(31,339,561), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfic_dat",	XSPR(31,339,562), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mfdbcnt",	XSPR(31,339,562), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfdbcr4",	XSPR(31,339,563), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfdbcr5",	XSPR(31,339,564), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfiac5",	XSPR(31,339,565), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfiac6",	XSPR(31,339,566), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfiac7",	XSPR(31,339,567), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfdc_cst",	XSPR(31,339,568), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mfiac8",	XSPR(31,339,568), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfdc_adr",	XSPR(31,339,569), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mfdberc0",	XSPR(31,339,569), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfdc_dat",	XSPR(31,339,570), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
-{"mfmcsrr0",	XSPR(31,339,570), XSPR_MASK, PPCRFMCI,	PPCNONE,	{RT}},
-{"mfmcsrr1",	XSPR(31,339,571), XSPR_MASK, PPCRFMCI,	PPCNONE,	{RT}},
-{"mfmcsr",	XSPR(31,339,572), XSPR_MASK, PPCRFMCI,	PPCNONE,	{RT}},
-{"mfmcar",	XSPR(31,339,573), XSPR_MASK, PPCRFMCI,	TITAN,  	{RT}},
+{"mfmcsrr0",	XSPR(31,339,570), XSPR_MASK, PPCRFMCI|PPCVLE,	PPCNONE,	{RT}},
+{"mfmcsrr1",	XSPR(31,339,571), XSPR_MASK, PPCRFMCI|PPCVLE,	PPCNONE,	{RT}},
+{"mfmcsr",	XSPR(31,339,572), XSPR_MASK, PPCRFMCI|PPCVLE,	PPCNONE,	{RT}},
+{"mfmcar",	XSPR(31,339,573), XSPR_MASK, PPCRFMCI|PPCVLE,	TITAN,  	{RT}},
+{"mfddam",	XSPR(31,339,576), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfdbcr6",	XSPR(31,339,603), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
+{"mfsprg8",	XSPR(31,339,604), XSPR_MASK, PPC|PPCVLE, PPCNONE,	{RT}},
+{"mfsprg9",	XSPR(31,339,605), XSPR_MASK, PPC|PPCVLE, PPCNONE,	{RT}},
 {"mfdpdr",	XSPR(31,339,630), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
 {"mfdpir",	XSPR(31,339,631), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mfpid1",	XSPR(31,339,633), XSPR_MASK, BOOKE,	PPCNONE,	{RS}},
+{"mfpid2",	XSPR(31,339,634), XSPR_MASK, BOOKE,	PPCNONE,	{RS}},
 {"mfimmr",	XSPR(31,339,638), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
+{"mftlb0cfg",	XSPR(31,339,688), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mftlb1cfg",	XSPR(31,339,689), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mfmi_ctr",	XSPR(31,339,784), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
 {"mfmi_ap",	XSPR(31,339,786), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
 {"mfmi_epn",	XSPR(31,339,787), XSPR_MASK, PPC860,	PPCNONE,	{RT}},
@@ -5001,6 +5199,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mfdbcr1",	XSPR(31,339,957), XSPR_MASK, PPC405,	PPCNONE,	{RT}},
 {"mfpmc3",	XSPR(31,339,957), XSPR_MASK, PPC750,	PPCNONE,	{RT}},
 {"mfpmc4",	XSPR(31,339,958), XSPR_MASK, PPC750,	PPCNONE,	{RT}},
+{"mfl1finv1",	XSPR(31,339,959), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mficdbdr",	XSPR(31,339,979), XSPR_MASK, PPC403|TITAN, PPCNONE,	{RT}},
 {"mfesr",	XSPR(31,339,980), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mfdear",	XSPR(31,339,981), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
@@ -5014,12 +5213,20 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mfsrr2",	XSPR(31,339,990), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mfsrr3",	XSPR(31,339,991), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mfdbsr",	XSPR(31,339,1008), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
+{"mfhid0",	XSPR(31,339,1008), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mfhid1",	XSPR(31,339,1009), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mfdbcr0",	XSPR(31,339,1010), XSPR_MASK, PPC405,	PPCNONE,	{RT}},
+{"mfl1csr0",	XSPR(31,339,1010), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mfdbdr",	XSPR(31,339,1011), XSPR_MASK, TITAN,	PPCNONE,	{RS}},
+{"mfl1csr1",	XSPR(31,339,1011), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mfmmucsr0",	XSPR(31,339,1012), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mfiac1",	XSPR(31,339,1012), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mfiac2",	XSPR(31,339,1013), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
+{"mfbucsr",	XSPR(31,339,1013), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mfdac1",	XSPR(31,339,1014), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mfdac2",	XSPR(31,339,1015), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
+{"mfmmucfg",	XSPR(31,339,1015), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mfl1finv0",	XSPR(31,339,1016), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfl2cr",	XSPR(31,339,1017), XSPR_MASK, PPC750,	PPCNONE,	{RT}},
 {"mfdccr",	XSPR(31,339,1018), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mficcr",	XSPR(31,339,1019), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
@@ -5031,6 +5238,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mfpbl2",	XSPR(31,339,1022), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
 {"mfthrm3",	XSPR(31,339,1022), XSPR_MASK, PPC750,	PPCNONE,	{RT}},
 {"mfpbu2",	XSPR(31,339,1023), XSPR_MASK, PPC403,	PPCNONE,	{RT}},
+{"mfsvr",	XSPR(31,339,1023), XSPR_MASK, PPCVLE,	PPCNONE,	{RT}},
 {"mfspr",	X(31,339),	X_MASK,      COM|PPCVLE, PPCNONE,	{RT, SPR}},
  
 {"lwax",	X(31,341),	X_MASK,      PPC64|PPCVLE, PPCNONE,	{RT, RA0, RB}},
@@ -5162,7 +5370,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"stvexwx",	X(31,453),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
 
-{"dccci",	X(31,454), XRT_MASK, PPC403|PPC440|TITAN|PPCA2, PPCNONE, {RAOPT, RBOPT}},
+{"dccci",	X(31,454), XRT_MASK, PPC403|PPC440|TITAN|PPCA2|PPCVLE, PPCNONE, {RAOPT, RBOPT}},
 {"dci",		X(31,454),	XRARB_MASK, PPCA2|PPC476|PPCVLE, PPCNONE, {CT}},
  
 {"divdu",	XO(31,457,0,0),	XO_MASK,  PPC64|PPCVLE, PPCNONE,	{RT, RA, RB}},
@@ -5183,7 +5391,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mtdar",	XSPR(31,467, 19), XSPR_MASK, COM,	TITAN,  	{RS}},
 {"mtrtcu",	XSPR(31,467, 20), XSPR_MASK, COM,	TITAN,  	{RS}},
 {"mtrtcl",	XSPR(31,467, 21), XSPR_MASK, COM,	TITAN,  	{RS}},
-{"mtdec",	XSPR(31,467, 22), XSPR_MASK, COM,	PPCNONE,	{RS}},
+{"mtdec",	XSPR(31,467, 22), XSPR_MASK, COM|PPCVLE,	PPCNONE,	{RS}},
 {"mtsdr0",	XSPR(31,467, 24), XSPR_MASK, POWER,	PPCNONE,	{RS}},
 {"mtsdr1",	XSPR(31,467, 25), XSPR_MASK, COM,	TITAN,  	{RS}},
 {"mtsrr0",	XSPR(31,467, 26), XSPR_MASK, COM|PPCVLE, PPCNONE,	{RS}},
@@ -5225,8 +5433,9 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mtsprg7",	XSPR(31,467,279), XSPR_MASK, PPC405|BOOKE|PPCVLE, PPCNONE, {RS}},
 {"mtasr",	XSPR(31,467,280), XSPR_MASK, PPC64,	PPCNONE,	{RS}},
 {"mtear",	XSPR(31,467,282), XSPR_MASK, PPC,	TITAN,  	{RS}},
-{"mttbl",	XSPR(31,467,284), XSPR_MASK, PPC,	PPCNONE,	{RS}},
-{"mttbu",	XSPR(31,467,285), XSPR_MASK, PPC,	PPCNONE,	{RS}},
+{"mttbl",	XSPR(31,467,284), XSPR_MASK, PPC|PPCVLE,	PPCNONE,	{RS}},
+{"mttbu",	XSPR(31,467,285), XSPR_MASK, PPC|PPCVLE,	PPCNONE,	{RS}},
+{"mtpir",	XSPR(31,467,286), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RS}},
 {"mtdbsr",	XSPR(31,467,304), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RS}},
 {"mtdbcr0",	XSPR(31,467,308), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RS}},
 {"mtdbcr1",	XSPR(31,467,309), XSPR_MASK, BOOKE|PPCVLE, PPCNONE,	{RS}},
@@ -5265,12 +5474,36 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mtivor33",	XSPR(31,467,529), XSPR_MASK, PPCSPE,	PPCNONE,	{RS}},
 {"mtibatl",	XSPR(31,467,529), XSPRBAT_MASK, PPC,	TITAN,  	{SPRBAT, RS}},
 {"mtivor34",	XSPR(31,467,530), XSPR_MASK, PPCSPE,	PPCNONE,	{RS}},
-{"mtivor35",	XSPR(31,467,531), XSPR_MASK, PPCPMR,	PPCNONE,	{RS}},
+{"mtivor35",	XSPR(31,467,531), XSPR_MASK, PPCPMR|PPCVLE,	PPCNONE,	{RS}},
 {"mtdbatu",	XSPR(31,467,536), XSPRBAT_MASK, PPC,	TITAN,  	{SPRBAT, RS}},
 {"mtdbatl",	XSPR(31,467,537), XSPRBAT_MASK, PPC,	TITAN,  	{SPRBAT, RS}},
+{"mtctxcr",	XSPR(31,467,560), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtdbcr3",	XSPR(31,467,561), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtdbcnt",	XSPR(31,467,562), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtdbcr4",	XSPR(31,467,563), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtdbcr5",	XSPR(31,467,564), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtiac5",	XSPR(31,467,565), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtiac6",	XSPR(31,467,566), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtiac7",	XSPR(31,467,567), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtiac8",	XSPR(31,467,568), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
 {"mtmcsrr0",	XSPR(31,467,570), XSPR_MASK, PPCRFMCI|PPCVLE, PPCNONE,	{RS}},
 {"mtmcsrr1",	XSPR(31,467,571), XSPR_MASK, PPCRFMCI|PPCVLE, PPCNONE,	{RS}},
-{"mtmcsr",	XSPR(31,467,572), XSPR_MASK, PPCRFMCI,	PPCNONE,	{RS}},
+{"mtmcsr",	XSPR(31,467,572), XSPR_MASK, PPCRFMCI|PPCVLE,	PPCNONE,	{RS}},
+{"mtmcar",	XSPR(31,467,573), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtdsrr0",	XSPR(31,467,574), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtdsrr1",	XSPR(31,467,575), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtddam",	XSPR(31,467,576), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtdbcr6",	XSPR(31,467,603), XSPR_MASK, PPCVLE, PPCNONE,	{RS}},
+{"mtsprg8",	XSPR(31,467,604), XSPR_MASK, BOOKE|PPCVLE, PPCNONE, {RS}},
+{"mtsprg9",	XSPR(31,467,605), XSPR_MASK, BOOKE|PPCVLE, PPCNONE, {RS}},
+{"mtmas0",	XSPR(31,467,624), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtmas1",	XSPR(31,467,625), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtmas2",	XSPR(31,467,626), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtmas3",	XSPR(31,467,627), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtmas4",	XSPR(31,467,628), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtmas6",	XSPR(31,467,630), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtpid1",	XSPR(31,467,633), XSPR_MASK, BOOKE,	PPCNONE,	{RS}},
+{"mtpid2",	XSPR(31,467,634), XSPR_MASK, BOOKE,	PPCNONE,	{RS}},
 {"mtivndx",	XSPR(31,467,880), XSPR_MASK, TITAN,	PPCNONE,	{RS}},
 {"mtdvndx",	XSPR(31,467,881), XSPR_MASK, TITAN,	PPCNONE,	{RS}},
 {"mtivlim",	XSPR(31,467,882), XSPR_MASK, TITAN,	PPCNONE,	{RS}},
@@ -5306,6 +5539,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mtdbcr1",	XSPR(31,467,957), XSPR_MASK, PPC405,	PPCNONE,	{RS}},
 {"mtpmc3",	XSPR(31,467,957), XSPR_MASK, PPC750,	PPCNONE,	{RS}},
 {"mtpmc4",	XSPR(31,467,958), XSPR_MASK, PPC750,	PPCNONE,	{RS}},
+{"mtl1finv1",	XSPR(31,467,959), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mticdbdr",	XSPR(31,467,979), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
 {"mtesr",	XSPR(31,467,980), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
 {"mtdear",	XSPR(31,467,981), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
@@ -5319,12 +5553,19 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mtsrr2",	XSPR(31,467,990), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
 {"mtsrr3",	XSPR(31,467,991), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
 {"mtdbsr",	XSPR(31,467,1008), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
+{"mthid0",	XSPR(31,467,1008), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mthid1",	XSPR(31,467,1009), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtl1csr0",	XSPR(31,467,1010), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
+{"mtl1csr1",	XSPR(31,467,1011), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mtdbdr",	XSPR(31,467,1011), XSPR_MASK, TITAN,	PPCNONE,	{RS}},
 {"mtdbcr0",	XSPR(31,467,1010), XSPR_MASK, PPC405,	PPCNONE,	{RS}},
 {"mtiac1",	XSPR(31,467,1012), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
+{"mtmmucsr0",	XSPR(31,467,1012), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mtiac2",	XSPR(31,467,1013), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
+{"mtbucsr",	XSPR(31,467,1013), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mtdac1",	XSPR(31,467,1014), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
 {"mtdac2",	XSPR(31,467,1015), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
+{"mtl1finv0",	XSPR(31,467,1016), XSPR_MASK, PPCVLE,	PPCNONE,	{RS}},
 {"mtl2cr",	XSPR(31,467,1017), XSPR_MASK, PPC750,	PPCNONE,	{RS}},
 {"mtdccr",	XSPR(31,467,1018), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
 {"mticcr",	XSPR(31,467,1019), XSPR_MASK, PPC403,	PPCNONE,	{RS}},
@@ -5413,8 +5654,8 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"rrib",	XRC(31,537,0),	X_MASK,      M601,	PPCNONE,	{RA, RS, RB}},
 {"rrib.",	XRC(31,537,1),	X_MASK,      M601,	PPCNONE,	{RA, RS, RB}},
 
-{"srd",		XRC(31,539,0),	X_MASK,      PPC64,	PPCNONE,	{RA, RS, RB}},
-{"srd.",	XRC(31,539,1),	X_MASK,      PPC64,	PPCNONE,	{RA, RS, RB}},
+{"srd",		XRC(31,539,0),	X_MASK,      PPC64|PPCVLE,	PPCNONE,	{RA, RS, RB}},
+{"srd.",	XRC(31,539,1),	X_MASK,      PPC64|PPCVLE,	PPCNONE,	{RA, RS, RB}},
 
 {"maskir",	XRC(31,541,0),	X_MASK,      M601,	PPCNONE,	{RA, RS, RB}},
 {"maskir.",	XRC(31,541,1),	X_MASK,      M601,	PPCNONE,	{RA, RS, RB}},
@@ -5428,11 +5669,12 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"lvrx",	X(31,551),	X_MASK,      CELL,	PPCNONE,	{VD, RA0, RB}},
 {"lhfcmux",	APU(31,551,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
 
-{"subfo",	XO(31,40,1,0),	XO_MASK,     PPC,	PPCNONE,	{RT, RA, RB}},
-{"subo",	XO(31,40,1,0),	XO_MASK,     PPC,	PPCNONE,	{RT, RB, RA}},
-{"subfo.",	XO(31,40,1,1),	XO_MASK,     PPC,	PPCNONE,	{RT, RA, RB}},
-{"subo.",	XO(31,40,1,1),	XO_MASK,     PPC,	PPCNONE,	{RT, RB, RA}},
+{"subfo",	XO(31,40,1,0),	XO_MASK,     PPC|PPCVLE,	PPCNONE,	{RT, RA, RB}},
+{"subo",	XO(31,40,1,0),	XO_MASK,     PPC|PPCVLE,	PPCNONE,	{RT, RB, RA}},
+{"subfo.",	XO(31,40,1,1),	XO_MASK,     PPC|PPCVLE,	PPCNONE,	{RT, RA, RB}},
+{"subo.",	XO(31,40,1,1),	XO_MASK,     PPC|PPCVLE,	PPCNONE,	{RT, RB, RA}},
 
+{"mpusync",	XMPU(31,566),	XMPU_MASK,   PPCVLE,	PPCNONE,	{0}},
 {"tlbsync",	X(31,566),	0xffffffff, PPC|PPCVLE, PPCNONE,	{0}},
 
 {"lfsux",	X(31,567),	X_MASK,      COM,	PPCEFS,		{FRT, RAS, RB}},
@@ -5454,6 +5696,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"ptesync",	XSYNC(31,598,2), 0xffffffff, PPC64,	PPCNONE,	{0}},
 {"sync",	X(31,598),	XSYNCLE_MASK,E6500,	PPCNONE,	{LS, ESYNC}},
 {"sync",	X(31,598),	XSYNC_MASK, PPCCOM|PPCVLE, BOOKE|PPC476, {LS}},
+{"msync",	X(31,598),	XSYNC_MASK, PPCVLE,      BOOKE|PPC476, {LS}},
 {"msync",	X(31,598),	0xffffffff, BOOKE|PPCA2|PPC476, PPCNONE, {0}},
 {"sync",	X(31,598),	0xffffffff, BOOKE|PPC476, E6500,	{0}},
 {"lwsync",	X(31,598),	0xffffffff, E500,	PPCNONE,	{0}},
@@ -5482,7 +5725,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"lfdux",	X(31,631),	X_MASK,      COM,	PPCEFS,		{FRT, RAS, RB}},
 
-{"stbdx",	X(31,643),	X_MASK,      E500MC,	PPCNONE,	{RS, RA, RB}},
+{"stbdx",	X(31,643),	X_MASK,      E500MC|PPCVLE,	PPCNONE,	{RS, RA, RB}},
 
 {"stvlx",	X(31,647),	X_MASK,      CELL,	PPCNONE,	{VS, RA0, RB}},
 {"stbfcmux",	APU(31,647,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
@@ -5519,7 +5762,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"sre",		XRC(31,665,0),	X_MASK,      M601,	PPCNONE,	{RA, RS, RB}},
 {"sre.",	XRC(31,665,1),	X_MASK,      M601,	PPCNONE,	{RA, RS, RB}},
 
-{"sthdx",	X(31,675),	X_MASK,      E500MC,	PPCNONE,	{RS, RA, RB}},
+{"sthdx",	X(31,675),	X_MASK,      E500MC|PPCVLE,	PPCNONE,	{RS, RA, RB}},
 
 {"stvfrx",	X(31,677),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
 
@@ -5529,14 +5772,14 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"tendall.",	XRC(31,686,1)|(1<<25), XRTRARB_MASK, PPCHTM, PPCNONE,	{0}},
 {"tend.",	XRC(31,686,1), XRTARARB_MASK, PPCHTM,	PPCNONE,	{HTM_A}},
 
-{"stbcx.",	XRC(31,694,1),	X_MASK,      POWER7,	PPCNONE,	{RS, RA0, RB}},
+{"stbcx.",	XRC(31,694,1),	X_MASK,      POWER7|PPCVLE,	PPCNONE,	{RS, RA0, RB}},
 
 {"stfsux",	X(31,695),	X_MASK,      COM,	PPCEFS,		{FRS, RAS, RB}},
 
 {"sriq",	XRC(31,696,0),	X_MASK,      M601,	PPCNONE,	{RA, RS, SH}},
 {"sriq.",	XRC(31,696,1),	X_MASK,      M601,	PPCNONE,	{RA, RS, SH}},
 
-{"stwdx",	X(31,707),	X_MASK,      E500MC,	PPCNONE,	{RS, RA, RB}},
+{"stwdx",	X(31,707),	X_MASK,      E500MC|PPCVLE,	PPCNONE,	{RS, RA, RB}},
 
 {"stvflx",	X(31,709),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
 
@@ -5559,7 +5802,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"stswi",	X(31,725),	X_MASK, PPCCOM|PPCVLE,	E500|E500MC,	{RS, RA0, NB}},
 {"stsi",	X(31,725),	X_MASK,      PWRCOM,	PPCNONE,	{RS, RA0, NB}},
 
-{"sthcx.",	XRC(31,726,1),	X_MASK,      POWER7,	PPCNONE,	{RS, RA0, RB}},
+{"sthcx.",	XRC(31,726,1),	X_MASK,      POWER7|PPCVLE,	PPCNONE,	{RS, RA0, RB}},
 
 {"stfdx",	X(31,727),	X_MASK,      COM,	PPCEFS,		{FRS, RA0, RB}},
 
@@ -5572,15 +5815,15 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"mftgpr",	XRC(31,735,0),	XRA_MASK,    POWER6,	POWER7,		{RT, FRB}},
 {"stfdepx",	X(31,735),	X_MASK, E500MC|PPCA2|PPCVLE, PPCNONE,	{FRS, RA0, RB}},
 
-{"stddx",	X(31,739),	X_MASK,      E500MC,	PPCNONE,	{RS, RA, RB}},
+{"stddx",	X(31,739),	X_MASK,      E500MC|PPCVLE,	PPCNONE,	{RS, RA, RB}},
 
 {"stvswx",	X(31,741),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
 
 {"stqfcmux",	APU(31,743,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
 
-{"subfmeo",	XO(31,232,1,0),	XORB_MASK,   PPCCOM,	PPCNONE,	{RT, RA}},
+{"subfmeo",	XO(31,232,1,0),	XORB_MASK,   PPCCOM|PPCVLE,	PPCNONE,	{RT, RA}},
 {"sfmeo",	XO(31,232,1,0),	XORB_MASK,   PWRCOM,	PPCNONE,	{RT, RA}},
-{"subfmeo.",	XO(31,232,1,1),	XORB_MASK,   PPCCOM,	PPCNONE,	{RT, RA}},
+{"subfmeo.",	XO(31,232,1,1),	XORB_MASK,   PPCCOM|PPCVLE,	PPCNONE,	{RT, RA}},
 {"sfmeo.",	XO(31,232,1,1),	XORB_MASK,   PWRCOM,	PPCNONE,	{RT, RA}},
 
 {"mulldo",	XO(31,233,1,0),	XO_MASK,  PPC64|PPCVLE, PPCNONE,	{RT, RA, RB}},
@@ -5609,7 +5852,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"srliq.",	XRC(31,760,1),	X_MASK,      M601,	PPCNONE,	{RA, RS, SH}},
 
 {"lvsm",	X(31,773),	X_MASK,      PPCVEC2,	PPCNONE,	{VD, RA0, RB}},
-{"stvepxl",	X(31,775),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
+{"stvepxl",	X(31,775),	X_MASK,      PPCVEC2|PPCVLE,	PPCNONE,	{VS, RA0, RB}},
 {"lvlxl",	X(31,775),	X_MASK,      CELL,	PPCNONE,	{VD, RA0, RB}},
 {"ldfcmux",	APU(31,775,0), 	APU_MASK,    PPC405,	PPCNONE,	{FCRT, RA, RB}},
 
@@ -5639,13 +5882,13 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"sraw.",	XRC(31,792,1),	X_MASK,	 PPCCOM|PPCVLE, PPCNONE,	{RA, RS, RB}},
 {"sra.",	XRC(31,792,1),	X_MASK,      PWRCOM,	PPCNONE,	{RA, RS, RB}},
 
-{"srad",	XRC(31,794,0),	X_MASK,      PPC64,	PPCNONE,	{RA, RS, RB}},
-{"srad.",	XRC(31,794,1),	X_MASK,      PPC64,	PPCNONE,	{RA, RS, RB}},
+{"srad",	XRC(31,794,0),	X_MASK,      PPC64|PPCVLE,	PPCNONE,	{RA, RS, RB}},
+{"srad.",	XRC(31,794,1),	X_MASK,      PPC64|PPCVLE,	PPCNONE,	{RA, RS, RB}},
 
 {"lfddx",	X(31,803),	X_MASK,      E500MC|PPCVLE, PPCNONE,	{FRT, RA, RB}},
 
 {"lvtrxl",	X(31,805),	X_MASK,      PPCVEC2,	PPCNONE,	{VD, RA0, RB}},
-{"stvepx",	X(31,807),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
+{"stvepx",	X(31,807),	X_MASK,      PPCVEC2|PPCVLE,	PPCNONE,	{VS, RA0, RB}},
 {"lvrxl",	X(31,807),	X_MASK,      CELL,	PPCNONE,	{VD, RA0, RB}},
 
 {"tabortdc.",	XRC(31,814,1),	X_MASK,      PPCHTM,	PPCNONE,	{TO, RA, RB}},
@@ -5717,14 +5960,14 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"tabort.",	XRC(31,910,1),	XRTRB_MASK,  PPCHTM,	PPCNONE,	{RA}},
 
-{"tlbsx",	XRC(31,914,0),	X_MASK, PPC403|BOOKE|PPCA2|PPC476, PPCNONE, {RTO, RA0, RB}},
+{"tlbsx",	XRC(31,914,0),	X_MASK, PPC403|BOOKE|PPCA2|PPC476|PPCVLE, PPCNONE, {RTO, RA0, RB}},
 {"tlbsx.",	XRC(31,914,1),	X_MASK, PPC403|BOOKE|PPCA2|PPC476, PPCNONE, {RTO, RA0, RB}},
 
 {"slbmfee",	X(31,915),	XRA_MASK,    PPC64,	PPCNONE,	{RT, RB}},
 
 {"stwcix",	X(31,917),	X_MASK,      POWER6,	PPCNONE,	{RS, RA0, RB}},
 
-{"sthbrx",	X(31,918),	X_MASK,      COM,	PPCNONE,	{RS, RA0, RB}},
+{"sthbrx",	X(31,918),	X_MASK,      COM|PPCVLE,	PPCNONE,	{RS, RA0, RB}},
 
 {"stfdpx",	X(31,919),	X_MASK,      POWER6,	POWER7,		{FRSp, RA0, RB}},
 {"stfqx",	X(31,919),	X_MASK,      POWER2,	PPCNONE,	{FRS, RA0, RB}},
@@ -5740,7 +5983,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"extsh.",	XRC(31,922,1),	XRB_MASK,    PPCCOM|PPCVLE, PPCNONE,	{RA, RS}},
 {"exts.",	XRC(31,922,1),	XRB_MASK,    PWRCOM,	PPCNONE,	{RA, RS}},
 
-{"stfddx",	X(31,931),	X_MASK,      E500MC,	PPCNONE,	{FRS, RA, RB}},
+{"stfddx",	X(31,931),	X_MASK,      E500MC|PPCVLE,	PPCNONE,	{FRS, RA, RB}},
 
 {"stvfrxl",	X(31,933),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
 
@@ -5759,7 +6002,8 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"tlbrehi",	XTLB(31,946,0),	XTLB_MASK,   PPC403,	PPCA2,		{RT, RA}},
 {"tlbrelo",	XTLB(31,946,1),	XTLB_MASK,   PPC403,	PPCA2,		{RT, RA}},
-{"tlbre",	X(31,946),	X_MASK, PPC403|BOOKE|PPCA2|PPC476, PPCNONE, {RSO, RAOPT, SHO}},
+{"mpure",	XMPU(31,946),	XMPU_MASK,   PPCVLE,	PPCNONE,	{0}},
+{"tlbre",	X(31,946),	X_MASK, PPC403|BOOKE|PPCA2|PPC476|PPCVLE, PPCNONE, {RSO, RAOPT, SHO}},
 
 {"sthcix",	X(31,949),	X_MASK,      POWER6,	PPCNONE,	{RS, RA0, RB}},
 
@@ -5776,7 +6020,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 
 {"stvflxl",	X(31,965),	X_MASK,      PPCVEC2,	PPCNONE,	{VS, RA0, RB}},
 
-{"iccci",	X(31,966), XRT_MASK, PPC403|PPC440|TITAN|PPCA2, PPCNONE, {RAOPT, RBOPT}},
+{"iccci",	X(31,966), XRT_MASK, PPC403|PPC440|TITAN|PPCA2|PPCVLE, PPCNONE, {RAOPT, RBOPT}},
 {"ici",		X(31,966),	XRARB_MASK,  PPCA2|PPC476|PPCVLE, PPCNONE, {CT}},
  
 {"divduo",	XO(31,457,1,0),	XO_MASK,     PPC64|PPCVLE, PPCNONE,	{RT, RA, RB}},
@@ -5791,7 +6035,8 @@ const struct powerpc_opcode powerpc_opcodes[] = {
 {"tlbld",	X(31,978),	XRTRA_MASK,  PPC, PPC403|BOOKE|PPCA2|PPC476, {RB}},
 {"tlbwehi",	XTLB(31,978,0),	XTLB_MASK,   PPC403,	PPCNONE,	{RT, RA}},
 {"tlbwelo",	XTLB(31,978,1),	XTLB_MASK,   PPC403,	PPCNONE,	{RT, RA}},
-{"tlbwe",	X(31,978),	X_MASK, PPC403|BOOKE|PPCA2|PPC476, PPCNONE, {RSO, RAOPT, SHO}},
+{"mpuwe",	XMPU(31,978),	XMPU_MASK,   PPCVLE,	PPCNONE,	{0}},
+{"tlbwe",	X(31,978),	X_MASK, PPC403|BOOKE|PPCA2|PPC476|PPCVLE, PPCNONE, {RSO, RAOPT, SHO}},
 
 {"stbcix",	X(31,981),	X_MASK,      POWER6,	PPCNONE,	{RS, RA0, RB}},
 
@@ -6438,6 +6683,7 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"se_rfci",	C(9),		C_MASK,		PPCVLE,	PPCNONE,	{}},
 {"se_rfdi",	C(10),		C_MASK,		PPCVLE,	PPCNONE,	{}},
 {"se_rfmci",	C(11),		C_MASK,		PPCVLE,	PPCNONE,	{}},
+{"se_rfgi",	C(12),		C_MASK,		PPCVLE,	PPCNONE,	{}},
 {"se_not",	SE_R(0,2),	SE_R_MASK,	PPCVLE,	PPCNONE,	{RX}},
 {"se_neg",	SE_R(0,3),	SE_R_MASK,	PPCVLE,	PPCNONE,	{RX}},
 {"se_mflr",	SE_R(0,8),	SE_R_MASK,	PPCVLE,	PPCNONE,	{RX}},
@@ -6459,7 +6705,687 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"se_cmpl",	SE_RR(3,1),	SE_RR_MASK,	PPCVLE,	PPCNONE,	{RX, RY}},
 {"se_cmph",	SE_RR(3,2),	SE_RR_MASK,	PPCVLE,	PPCNONE,	{RX, RY}},
 {"se_cmphl",	SE_RR(3,3),	SE_RR_MASK,	PPCVLE,	PPCNONE,	{RX, RY}},
- 
+
+/* by major opcode */
+{"zvaddih",            VX(4, 0x200), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvsubifh",           VX(4, 0x201), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvaddh",             VX(4, 0x204), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfh",            VX(4, 0x205), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddsubfh",         VX(4, 0x206), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfaddh",         VX(4, 0x207), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddhx",            VX(4, 0x20C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfhx",           VX(4, 0x20D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddsubfhx",        VX(4, 0x20E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfaddhx",        VX(4, 0x20F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddwus",            VX(4, 0x210), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfwus",           VX(4, 0x211), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddwss",            VX(4, 0x212), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfwss",           VX(4, 0x213), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddhus",           VX(4, 0x214), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfhus",          VX(4, 0x215), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddhss",           VX(4, 0x216), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfhss",          VX(4, 0x217), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddsubfhss",       VX(4, 0x21A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfaddhss",       VX(4, 0x21B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddhxss",          VX(4, 0x21C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfhxss",         VX(4, 0x21D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddsubfhxss",      VX(4, 0x21E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfaddhxss",      VX(4, 0x21F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddheuw",           VX(4, 0x220), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfheuw",          VX(4, 0x221), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddhesw",           VX(4, 0x222), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfhesw",          VX(4, 0x223), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddhouw",           VX(4, 0x224), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfhouw",          VX(4, 0x225), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddhosw",           VX(4, 0x226), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfhosw",          VX(4, 0x227), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmergehih",         VX(4, 0x22C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmergeloh",         VX(4, 0x22D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmergehiloh",       VX(4, 0x22E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmergelohih",       VX(4, 0x22F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvcmpgthu",          VX(4, 0x230), VX_MASK, PPCLSP, PPCNONE, {CRFD, RA, RB}},
+{"zvcmpgths",          VX(4, 0x230), VX_MASK, PPCLSP, PPCNONE, {CRFD, RA, RB}},
+{"zvcmplthu",          VX(4, 0x231), VX_MASK, PPCLSP, PPCNONE, {CRFD, RA, RB}},
+{"zvcmplths",          VX(4, 0x231), VX_MASK, PPCLSP, PPCNONE, {CRFD, RA, RB}},
+{"zvcmpeqh",           VX(4, 0x232), VX_MASK, PPCLSP, PPCNONE, {CRFD, RA, RB}},
+{"zpkswgshfrs",        VX(4, 0x238), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zpkswgswfrs",        VX(4, 0x239), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvpkshgwshfrs",      VX(4, 0x23A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvpkswshfrs",        VX(4, 0x23B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvpkswuhs",          VX(4, 0x23C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvpkswshs",          VX(4, 0x23D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvpkuwuhs",          VX(4, 0x23E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsplatih",          VX_LSP(4, 0x23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, SIMM}},
+{"zvsplatfih",         VX_LSP(4, 0xA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, SIMM}},
+{"zcntlsw",            VX_LSP(4, 0x2A3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvcntlzh",           VX_LSP(4, 0x323F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvcntlsh",           VX_LSP(4, 0x3A3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"znegws",             VX_LSP(4, 0x4A3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvnegh",             VX_LSP(4, 0x523F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvneghs",            VX_LSP(4, 0x5A3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvnegho",            VX_LSP(4, 0x623F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvneghos",           VX_LSP(4, 0x6A3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zrndwh",             VX_LSP(4, 0x823F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zrndwhss",           VX_LSP(4, 0x8A3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvabsh",             VX_LSP(4, 0xA23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvabshs",            VX_LSP(4, 0xAA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zabsw",              VX_LSP(4, 0xB23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zabsws",             VX_LSP(4, 0xBA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatswuw",           VX_LSP(4, 0xC23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatuwsw",           VX_LSP(4, 0xCA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatswuh",           VX_LSP(4, 0xD23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatswsh",           VX_LSP(4, 0xDA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvsatshuh",          VX_LSP(4, 0xE23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvsatuhsh",          VX_LSP(4, 0xEA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatuwuh",           VX_LSP(4, 0xF23F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatuwsh",           VX_LSP(4, 0xFA3F), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zsatsduw",           VX(4, 0x260), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsatsdsw",           VX(4, 0x261), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsatuduw",           VX(4, 0x262), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvselh",             VX(4, 0x264), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zxtrw",              VX(4, 0x264), VX_LSP_OFF_MASK, PPCLSP, PPCNONE, {RD, RA, RB, VX_OFF}},
+{"zbrminc",            VX(4, 0x268), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zcircinc",           VX(4, 0x269), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zdivwsf",            VX(4, 0x26B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsrhu",             VX(4, 0x270), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsrhs",             VX(4, 0x271), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsrhiu",            VX(4, 0x272), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvsrhis",            VX(4, 0x273), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvslh",              VX(4, 0x274), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvrlh",              VX(4, 0x275), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvslhi",             VX(4, 0x276), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvrlhi",             VX(4, 0x277), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvslhus",            VX(4, 0x278), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvslhss",            VX(4, 0x279), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvslhius",           VX(4, 0x27A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zvslhiss",           VX(4, 0x27B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zslwus",             VX(4, 0x27C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zslwss",             VX(4, 0x27D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zslwius",            VX(4, 0x27E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zslwiss",            VX(4, 0x27F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zaddwgui",           VX(4, 0x460), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfwgui",          VX(4, 0x461), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddd",              VX(4, 0x462), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfd",             VX(4, 0x463), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddsubfw",         VX(4, 0x464), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfaddw",         VX(4, 0x465), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddw",             VX(4, 0x466), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfw",            VX(4, 0x467), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddwgsi",           VX(4, 0x468), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfwgsi",          VX(4, 0x469), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zadddss",            VX(4, 0x46A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfdss",           VX(4, 0x46B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddsubfwss",       VX(4, 0x46C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfaddwss",       VX(4, 0x46D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddwss",           VX(4, 0x46E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfwss",          VX(4, 0x46F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zaddwgsf",           VX(4, 0x470), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfwgsf",          VX(4, 0x471), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zadddus",            VX(4, 0x472), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zsubfdus",           VX(4, 0x473), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvaddwus",           VX(4, 0x476), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvsubfwus",          VX(4, 0x477), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvunpkhgwsf",        VX_LSP(4, 0x478), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvunpkhsf",          VX_LSP(4, 0xC78), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvunpkhui",          VX_LSP(4, 0x1478), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvunpkhsi",          VX_LSP(4, 0x1C78), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zunpkwgsf",          VX_LSP(4, 0x2478), VX_LSP_MASK, PPCLSP, PPCNONE, {RD, RA}},
+{"zvdotphgwasmf",      VX(4, 0x488), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwasmfr",     VX(4, 0x489), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwasmfaa",    VX(4, 0x48A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwasmfraa",   VX(4, 0x48B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwasmfan",    VX(4, 0x48C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwasmfran",   VX(4, 0x48D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmf",        VX(4, 0x490), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfr",       VX(4, 0x491), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfaa",      VX(4, 0x492), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfraa",     VX(4, 0x493), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfan",      VX(4, 0x494), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfran",     VX(4, 0x495), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfanp",     VX(4, 0x496), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulgwsmfranp",    VX(4, 0x497), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegwsmf",          VX(4, 0x498), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegwsmfr",         VX(4, 0x499), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegwsmfaa",        VX(4, 0x49A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegwsmfraa",       VX(4, 0x49B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegwsmfan",        VX(4, 0x49C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegwsmfran",       VX(4, 0x49D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgwasmf",     VX(4, 0x4A8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgwasmfr",    VX(4, 0x4A9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgwasmfaa",   VX(4, 0x4AA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgwasmfraa",  VX(4, 0x4AB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgwasmfan",   VX(4, 0x4AC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgwasmfran",  VX(4, 0x4AD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmf",        VX(4, 0x4B0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfr",       VX(4, 0x4B1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfaa",      VX(4, 0x4B2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfraa",     VX(4, 0x4B3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfan",      VX(4, 0x4B4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfran",     VX(4, 0x4B5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfanp",     VX(4, 0x4B6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllgwsmfranp",    VX(4, 0x4B7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogwsmf",         VX(4, 0x4B8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogwsmfr",        VX(4, 0x4B9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogwsmfaa",       VX(4, 0x4BA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogwsmfraa",      VX(4, 0x4BB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogwsmfan",       VX(4, 0x4BC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogwsmfran",      VX(4, 0x4BD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwssmf",      VX(4, 0x4C8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwssmfr",     VX(4, 0x4C9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwssmfaa",    VX(4, 0x4CA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwssmfraa",   VX(4, 0x4CB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwssmfan",    VX(4, 0x4CC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgwssmfran",   VX(4, 0x4CD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmf",        VX(4, 0x4D0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfr",       VX(4, 0x4D1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfaa",      VX(4, 0x4D2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfraa",     VX(4, 0x4D3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfan",      VX(4, 0x4D4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfran",     VX(4, 0x4D5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfanp",     VX(4, 0x4D6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuugwsmfranp",    VX(4, 0x4D7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogwsmf",          VX(4, 0x4D8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogwsmfr",         VX(4, 0x4D9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogwsmfaa",        VX(4, 0x4DA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogwsmfraa",       VX(4, 0x4DB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogwsmfan",        VX(4, 0x4DC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogwsmfran",       VX(4, 0x4DD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmf",        VX(4, 0x4F0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfr",       VX(4, 0x4F1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfaa",      VX(4, 0x4F2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfraa",     VX(4, 0x4F3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfan",      VX(4, 0x4F4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfran",     VX(4, 0x4F5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfanp",     VX(4, 0x4F6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlgwsmfranp",    VX(4, 0x4F7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegui",            VX(4, 0x500), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgaui",        VX(4, 0x501), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheguiaa",          VX(4, 0x502), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgauiaa",      VX(4, 0x503), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheguian",          VX(4, 0x504), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgauian",      VX(4, 0x505), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsi",            VX(4, 0x508), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasi",        VX(4, 0x509), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsiaa",          VX(4, 0x50A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasiaa",      VX(4, 0x50B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsian",          VX(4, 0x50C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasian",      VX(4, 0x50D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsui",           VX(4, 0x510), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasui",       VX(4, 0x511), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsuiaa",         VX(4, 0x512), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasuiaa",     VX(4, 0x513), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsuian",         VX(4, 0x514), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasuian",     VX(4, 0x515), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsmf",           VX(4, 0x518), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasmf",       VX(4, 0x519), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsmfaa",         VX(4, 0x51A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasmfaa",     VX(4, 0x51B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhegsmfan",         VX(4, 0x51C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgasmfan",     VX(4, 0x51D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogui",           VX(4, 0x520), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgaui",       VX(4, 0x521), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheoguiaa",         VX(4, 0x522), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgauiaa",     VX(4, 0x523), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheoguian",         VX(4, 0x524), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgauian",     VX(4, 0x525), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsi",           VX(4, 0x528), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasi",       VX(4, 0x529), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsiaa",         VX(4, 0x52A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasiaa",     VX(4, 0x52B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsian",         VX(4, 0x52C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasian",     VX(4, 0x52D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsui",          VX(4, 0x530), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasui",      VX(4, 0x531), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsuiaa",        VX(4, 0x532), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasuiaa",    VX(4, 0x533), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsuian",        VX(4, 0x534), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasuian",    VX(4, 0x535), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsmf",          VX(4, 0x538), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasmf",      VX(4, 0x539), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsmfaa",        VX(4, 0x53A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasmfaa",    VX(4, 0x53B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheogsmfan",        VX(4, 0x53C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxgasmfan",    VX(4, 0x53D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogui",            VX(4, 0x540), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgsui",        VX(4, 0x541), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhoguiaa",          VX(4, 0x542), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgsuiaa",      VX(4, 0x543), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhoguian",          VX(4, 0x544), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgsuian",      VX(4, 0x545), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsi",            VX(4, 0x548), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssi",        VX(4, 0x549), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsiaa",          VX(4, 0x54A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssiaa",      VX(4, 0x54B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsian",          VX(4, 0x54C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssian",      VX(4, 0x54D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsui",           VX(4, 0x550), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssui",       VX(4, 0x551), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsuiaa",         VX(4, 0x552), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssuiaa",     VX(4, 0x553), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsuian",         VX(4, 0x554), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssuian",     VX(4, 0x555), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsmf",           VX(4, 0x558), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssmf",       VX(4, 0x559), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsmfaa",         VX(4, 0x55A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssmfaa",     VX(4, 0x55B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhogsmfan",         VX(4, 0x55C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphgssmfan",     VX(4, 0x55D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgui",             VX(4, 0x560), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwguiaa",           VX(4, 0x562), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwguiaas",          VX(4, 0x563), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwguian",           VX(4, 0x564), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwguians",          VX(4, 0x565), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsi",             VX(4, 0x568), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsiaa",           VX(4, 0x56A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsiaas",          VX(4, 0x56B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsian",           VX(4, 0x56C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsians",          VX(4, 0x56D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsui",            VX(4, 0x570), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsuiaa",          VX(4, 0x572), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsuiaas",         VX(4, 0x573), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsuian",          VX(4, 0x574), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsuians",         VX(4, 0x575), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsmf",            VX(4, 0x578), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsmfr",           VX(4, 0x579), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsmfaa",          VX(4, 0x57A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsmfraa",         VX(4, 0x57B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsmfan",          VX(4, 0x57C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwgsmfran",         VX(4, 0x57D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhului",           VX(4, 0x580), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuluiaa",         VX(4, 0x582), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuluiaas",        VX(4, 0x583), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuluian",         VX(4, 0x584), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuluians",        VX(4, 0x585), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuluianp",        VX(4, 0x586), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuluianps",       VX(4, 0x587), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsi",           VX(4, 0x588), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsiaa",         VX(4, 0x58A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsiaas",        VX(4, 0x58B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsian",         VX(4, 0x58C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsians",        VX(4, 0x58D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsianp",        VX(4, 0x58E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsianps",       VX(4, 0x58F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsui",          VX(4, 0x590), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsuiaa",        VX(4, 0x592), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsuiaas",       VX(4, 0x593), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsuian",        VX(4, 0x594), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsuians",       VX(4, 0x595), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsuianp",       VX(4, 0x596), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsuianps",      VX(4, 0x597), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsf",           VX(4, 0x598), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfr",          VX(4, 0x599), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfaas",        VX(4, 0x59A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfraas",       VX(4, 0x59B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfans",        VX(4, 0x59C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfrans",       VX(4, 0x59D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfanps",       VX(4, 0x59E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhulsfranps",      VX(4, 0x59F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllui",           VX(4, 0x5A0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhlluiaa",         VX(4, 0x5A2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhlluiaas",        VX(4, 0x5A3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhlluian",         VX(4, 0x5A4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhlluians",        VX(4, 0x5A5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhlluianp",        VX(4, 0x5A6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhlluianps",       VX(4, 0x5A7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsi",           VX(4, 0x5A8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsiaa",         VX(4, 0x5AA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsiaas",        VX(4, 0x5AB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsian",         VX(4, 0x5AC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsians",        VX(4, 0x5AD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsianp",        VX(4, 0x5AE), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsianps",       VX(4, 0x5AF), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsui",          VX(4, 0x5B0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsuiaa",        VX(4, 0x5B2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsuiaas",       VX(4, 0x5B3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsuian",        VX(4, 0x5B4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsuians",       VX(4, 0x5B5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsuianp",       VX(4, 0x5B6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsuianps",      VX(4, 0x5B7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsf",           VX(4, 0x5B8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfr",          VX(4, 0x5B9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfaas",        VX(4, 0x5BA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfraas",       VX(4, 0x5BB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfans",        VX(4, 0x5BC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfrans",       VX(4, 0x5BD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfanps",       VX(4, 0x5BE), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhllsfranps",      VX(4, 0x5BF), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuui",           VX(4, 0x5C0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuuiaa",         VX(4, 0x5C2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuuiaas",        VX(4, 0x5C3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuuian",         VX(4, 0x5C4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuuians",        VX(4, 0x5C5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuuianp",        VX(4, 0x5C6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuuuianps",       VX(4, 0x5C7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusi",           VX(4, 0x5C8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusiaa",         VX(4, 0x5CA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusiaas",        VX(4, 0x5CB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusian",         VX(4, 0x5CC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusians",        VX(4, 0x5CD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusianp",        VX(4, 0x5CE), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusianps",       VX(4, 0x5CF), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusui",          VX(4, 0x5D0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusuiaa",        VX(4, 0x5D2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusuiaas",       VX(4, 0x5D3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusuian",        VX(4, 0x5D4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusuians",       VX(4, 0x5D5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusuianp",       VX(4, 0x5D6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusuianps",      VX(4, 0x5D7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusf",           VX(4, 0x5D8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfr",          VX(4, 0x5D9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfaas",        VX(4, 0x5DA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfraas",       VX(4, 0x5DB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfans",        VX(4, 0x5DC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfrans",       VX(4, 0x5DD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfanps",       VX(4, 0x5DE), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuusfranps",      VX(4, 0x5DF), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlui",           VX(4, 0x5E0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxluiaa",         VX(4, 0x5E2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxluiaas",        VX(4, 0x5E3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxluian",         VX(4, 0x5E4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxluians",        VX(4, 0x5E5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxluianp",        VX(4, 0x5E6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxluianps",       VX(4, 0x5E7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsi",           VX(4, 0x5E8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsiaa",         VX(4, 0x5EA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsiaas",        VX(4, 0x5EB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsian",         VX(4, 0x5EC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsians",        VX(4, 0x5ED), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsianp",        VX(4, 0x5EE), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsianps",       VX(4, 0x5EF), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsui",          VX(4, 0x5F0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsuiaa",        VX(4, 0x5F2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsuiaas",       VX(4, 0x5F3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsuian",        VX(4, 0x5F4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsuians",       VX(4, 0x5F5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsuianp",       VX(4, 0x5F6), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsuianps",      VX(4, 0x5F7), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsf",           VX(4, 0x5F8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfr",          VX(4, 0x5F9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfaas",        VX(4, 0x5FA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfraas",       VX(4, 0x5FB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfans",        VX(4, 0x5FC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfrans",       VX(4, 0x5FD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfanps",       VX(4, 0x5FE), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhxlsfranps",      VX(4, 0x5FF), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheui",             VX(4, 0x600), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheuiaa",           VX(4, 0x602), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheuiaas",          VX(4, 0x603), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheuian",           VX(4, 0x604), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheuians",          VX(4, 0x605), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesi",             VX(4, 0x608), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesiaa",           VX(4, 0x60A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesiaas",          VX(4, 0x60B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesian",           VX(4, 0x60C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesians",          VX(4, 0x60D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesui",            VX(4, 0x610), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesuiaa",          VX(4, 0x612), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesuiaas",         VX(4, 0x613), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesuian",          VX(4, 0x614), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesuians",         VX(4, 0x615), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesf",             VX(4, 0x618), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesfr",            VX(4, 0x619), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesfaas",          VX(4, 0x61A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesfraas",         VX(4, 0x61B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesfans",          VX(4, 0x61C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhesfrans",         VX(4, 0x61D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheoui",            VX(4, 0x620), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheouiaa",          VX(4, 0x622), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheouiaas",         VX(4, 0x623), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheouian",          VX(4, 0x624), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheouians",         VX(4, 0x625), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosi",            VX(4, 0x628), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosiaa",          VX(4, 0x62A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosiaas",         VX(4, 0x62B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosian",          VX(4, 0x62C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosians",         VX(4, 0x62D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosui",           VX(4, 0x630), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosuiaa",         VX(4, 0x632), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosuiaas",        VX(4, 0x633), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosuian",         VX(4, 0x634), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosuians",        VX(4, 0x635), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosf",            VX(4, 0x638), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosfr",           VX(4, 0x639), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosfaas",         VX(4, 0x63A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosfraas",        VX(4, 0x63B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosfans",         VX(4, 0x63C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmheosfrans",        VX(4, 0x63D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhoui",             VX(4, 0x640), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhouiaa",           VX(4, 0x642), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhouiaas",          VX(4, 0x643), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhouian",           VX(4, 0x644), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhouians",          VX(4, 0x645), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosi",             VX(4, 0x648), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosiaa",           VX(4, 0x64A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosiaas",          VX(4, 0x64B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosian",           VX(4, 0x64C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosians",          VX(4, 0x64D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosui",            VX(4, 0x650), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosuiaa",          VX(4, 0x652), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosuiaas",         VX(4, 0x653), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosuian",          VX(4, 0x654), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosuians",         VX(4, 0x655), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosf",             VX(4, 0x658), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosfr",            VX(4, 0x659), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosfaas",          VX(4, 0x65A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosfraas",         VX(4, 0x65B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosfans",          VX(4, 0x65C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmhosfrans",         VX(4, 0x65D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuih",            VX(4, 0x660), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuihs",           VX(4, 0x661), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuiaah",          VX(4, 0x662), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuiaahs",         VX(4, 0x663), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuianh",          VX(4, 0x664), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhuianhs",         VX(4, 0x665), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsihs",           VX(4, 0x669), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsiaahs",         VX(4, 0x66B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsianhs",         VX(4, 0x66D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsuihs",          VX(4, 0x671), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsuiaahs",        VX(4, 0x673), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsuianhs",        VX(4, 0x675), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsfh",            VX(4, 0x678), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsfrh",           VX(4, 0x679), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsfaahs",         VX(4, 0x67A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsfraahs",        VX(4, 0x67B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsfanhs",         VX(4, 0x67C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvmhsfranhs",        VX(4, 0x67D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphaui",         VX(4, 0x680), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphauis",        VX(4, 0x681), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphauiaa",       VX(4, 0x682), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphauiaas",      VX(4, 0x683), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphauian",       VX(4, 0x684), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphauians",      VX(4, 0x685), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasi",         VX(4, 0x688), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasis",        VX(4, 0x689), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasiaa",       VX(4, 0x68A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasiaas",      VX(4, 0x68B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasian",       VX(4, 0x68C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasians",      VX(4, 0x68D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasui",        VX(4, 0x690), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasuis",       VX(4, 0x691), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasuiaa",      VX(4, 0x692), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasuiaas",     VX(4, 0x693), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasuian",      VX(4, 0x694), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasuians",     VX(4, 0x695), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasfs",        VX(4, 0x698), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasfrs",       VX(4, 0x699), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasfaas",      VX(4, 0x69A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasfraas",     VX(4, 0x69B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasfans",      VX(4, 0x69C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphasfrans",     VX(4, 0x69D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxaui",        VX(4, 0x6A0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxauis",       VX(4, 0x6A1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxauiaa",      VX(4, 0x6A2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxauiaas",     VX(4, 0x6A3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxauian",      VX(4, 0x6A4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxauians",     VX(4, 0x6A5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasi",        VX(4, 0x6A8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasis",       VX(4, 0x6A9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasiaa",      VX(4, 0x6AA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasiaas",     VX(4, 0x6AB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasian",      VX(4, 0x6AC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasians",     VX(4, 0x6AD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasui",       VX(4, 0x6B0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasuis",      VX(4, 0x6B1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasuiaa",     VX(4, 0x6B2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasuiaas",    VX(4, 0x6B3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasuian",     VX(4, 0x6B4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasuians",    VX(4, 0x6B5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasfs",       VX(4, 0x6B8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasfrs",      VX(4, 0x6B9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasfaas",     VX(4, 0x6BA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasfraas",    VX(4, 0x6BB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasfans",     VX(4, 0x6BC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphxasfrans",    VX(4, 0x6BD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphsui",         VX(4, 0x6C0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphsuis",        VX(4, 0x6C1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphsuiaa",       VX(4, 0x6C2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphsuiaas",      VX(4, 0x6C3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphsuian",       VX(4, 0x6C4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphsuians",      VX(4, 0x6C5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssi",         VX(4, 0x6C8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssis",        VX(4, 0x6C9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssiaa",       VX(4, 0x6CA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssiaas",      VX(4, 0x6CB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssian",       VX(4, 0x6CC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssians",      VX(4, 0x6CD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssui",        VX(4, 0x6D0), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssuis",       VX(4, 0x6D1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssuiaa",      VX(4, 0x6D2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssuiaas",     VX(4, 0x6D3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssuian",      VX(4, 0x6D4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssuians",     VX(4, 0x6D5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssfs",        VX(4, 0x6D8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssfrs",       VX(4, 0x6D9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssfaas",      VX(4, 0x6DA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssfraas",     VX(4, 0x6DB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssfans",      VX(4, 0x6DC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zvdotphssfrans",     VX(4, 0x6DD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwluis",            VX(4, 0x6E1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwluiaa",           VX(4, 0x6E2), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwluiaas",          VX(4, 0x6E3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwluian",           VX(4, 0x6E4), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwluians",          VX(4, 0x6E5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwlsis",            VX(4, 0x6E9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwlsiaas",          VX(4, 0x6EB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwlsians",          VX(4, 0x6ED), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwlsuis",           VX(4, 0x6F1), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwlsuiaas",         VX(4, 0x6F3), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwlsuians",         VX(4, 0x6F5), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwsf",              VX(4, 0x6F8), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwsfr",             VX(4, 0x6F9), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwsfaas",           VX(4, 0x6FA), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwsfraas",          VX(4, 0x6FB), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwsfans",           VX(4, 0x6FC), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zmwsfrans",          VX(4, 0x6FD), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlddx",              VX(4, 0x300), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zldd",               VX(4, 0x301), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zldwx",              VX(4, 0x302), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zldw",               VX(4, 0x303), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zldhx",              VX(4, 0x304), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zldh",               VX(4, 0x305), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwgsfdx",           VX(4, 0x308), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwgsfd",            VX(4, 0x309), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwwosdx",           VX(4, 0x30A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwwosd",            VX(4, 0x30B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhsplatwdx",       VX(4, 0x30C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhsplatwd",        VX(4, 0x30D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhsplatdx",        VX(4, 0x30E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhsplatd",         VX(4, 0x30F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhgwsfdx",         VX(4, 0x310), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhgwsfd",          VX(4, 0x311), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhedx",            VX(4, 0x312), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhed",             VX(4, 0x313), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhosdx",           VX(4, 0x314), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhosd",            VX(4, 0x315), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhoudx",           VX(4, 0x316), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhoud",            VX(4, 0x317), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhx",              VX(4, 0x318), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwh",               VX(4, 0x319), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwwx",              VX(4, 0x31A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlww",               VX(4, 0x31B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlhgwsfx",           VX(4, 0x31C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlhgwsf",            VX(4, 0x31D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlhhsplatx",         VX(4, 0x31E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlhhsplat",          VX(4, 0x31F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zstddx",             VX(4, 0x320), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstdd",              VX(4, 0x321), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstdwx",             VX(4, 0x322), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstdw",              VX(4, 0x323), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstdhx",             VX(4, 0x324), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstdh",              VX(4, 0x325), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwhedx",           VX(4, 0x328), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstwhed",            VX(4, 0x329), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwhodx",           VX(4, 0x32A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zstwhod",            VX(4, 0x32B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlhhex",             VX(4, 0x330), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zlhhe",              VX(4, 0x331), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zlhhosx",            VX(4, 0x332), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zlhhos",             VX(4, 0x333), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zlhhoux",            VX(4, 0x334), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zlhhou",             VX(4, 0x335), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zsthex",             VX(4, 0x338), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zsthe",              VX(4, 0x339), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zsthox",             VX(4, 0x33A), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstho",              VX(4, 0x33B), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwhx",             VX(4, 0x33C), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstwh",              VX(4, 0x33D), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwwx",             VX(4, 0x33E), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstww",              VX(4, 0x33F), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zlddmx",             VX(4, 0x340), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlddu",              VX(4, 0x341), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zldwmx",             VX(4, 0x342), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zldwu",              VX(4, 0x343), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zldhmx",             VX(4, 0x344), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zldhu",              VX(4, 0x345), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwgsfdmx",          VX(4, 0x348), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwgsfdu",           VX(4, 0x349), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwwosdmx",          VX(4, 0x34A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwwosdu",           VX(4, 0x34B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhsplatwdmx",      VX(4, 0x34C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhsplatwdu",       VX(4, 0x34D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhsplatdmx",       VX(4, 0x34E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhsplatdu",        VX(4, 0x34F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhgwsfdmx",        VX(4, 0x350), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhgwsfdu",         VX(4, 0x351), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhedmx",           VX(4, 0x352), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhedu",            VX(4, 0x353), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhosdmx",          VX(4, 0x354), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhosdu",           VX(4, 0x355), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhoudmx",          VX(4, 0x356), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhoudu",           VX(4, 0x357), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwhmx",             VX(4, 0x358), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwhu",              VX(4, 0x359), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlwwmx",             VX(4, 0x35A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlwwu",              VX(4, 0x35B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlhgwsfmx",          VX(4, 0x35C), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlhgwsfu",           VX(4, 0x35D), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlhhsplatmx",        VX(4, 0x35E), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zlhhsplatu",         VX(4, 0x35F), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zstddmx",            VX(4, 0x360), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstddu",             VX(4, 0x361), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstdwmx",            VX(4, 0x362), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstdwu",             VX(4, 0x363), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstdhmx",            VX(4, 0x364), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstdhu",             VX(4, 0x365), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwhedmx",          VX(4, 0x368), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstwhedu",           VX(4, 0x369), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwhodmx",          VX(4, 0x36A), VX_MASK, PPCLSP, PPCNONE, {RD, RA, RB}},
+{"zstwhodu",           VX(4, 0x36B), VX_MASK, PPCLSP, PPCNONE, {RD, RA, EVUIMM}},
+{"zlhhemx",            VX(4, 0x370), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zlhheu",             VX(4, 0x371), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zlhhosmx",           VX(4, 0x372), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zlhhosu",            VX(4, 0x373), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zlhhoumx",           VX(4, 0x374), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zlhhouu",            VX(4, 0x375), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zsthemx",            VX(4, 0x378), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstheu",             VX(4, 0x379), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zsthomx",            VX(4, 0x37A), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zsthou",             VX(4, 0x37B), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwhmx",            VX(4, 0x37C), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstwhu",             VX(4, 0x37D), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+{"zstwwmx",            VX(4, 0x37E), VX_MASK, PPCLSP, PPCNONE, {RA, RB, RS}},
+{"zstwwu",             VX(4, 0x37F), VX_MASK, PPCLSP, PPCNONE, {RA, RS, EVUIMM}},
+
 {"e_cmpi",	SCI8BF(6,0,21),	SCI8BF_MASK,	PPCVLE,	PPCNONE,	{CRD32, RA, SCLSCI8}},
 {"e_cmpli",	SCI8BF(6,1,21),	SCI8BF_MASK,	PPCVLE,	PPCNONE,	{CRD32, RA, SCLSCI8}},
 {"e_addi",	SCI8(6,16),	SCI8_MASK,	PPCVLE,	PPCNONE,	{RT, RA, SCLSCI8}},
@@ -6488,6 +7414,18 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"e_sthu",	OPVUP(6,5),	OPVUP_MASK,	PPCVLE,	PPCNONE,	{RT, D8, RA0}},
 {"e_stwu",	OPVUP(6,6),	OPVUP_MASK,	PPCVLE,	PPCNONE,	{RT, D8, RA0}},
 {"e_stmw",	OPVUP(6,9),	OPVUP_MASK,	PPCVLE,	PPCNONE,	{RT, D8, RA0}},
+
+{"e_ldmvgprw",	OP_VINT_D8(6,0,0x10), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_stmvgprw",	OP_VINT_D8(6,0,0x11), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_ldmvsprw",	OP_VINT_D8(6,1,0x10), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_stmvsprw",	OP_VINT_D8(6,1,0x11), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_ldmvsrrw",	OP_VINT_D8(6,4,0x10), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_stmvsrrw",	OP_VINT_D8(6,4,0x11), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_ldmvcsrrw",	OP_VINT_D8(6,5,0x10), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_stmvcsrrw",	OP_VINT_D8(6,5,0x11), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_ldmvdsrrw",	OP_VINT_D8(6,6,0x10), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+{"e_stmvdsrrw",	OP_VINT_D8(6,6,0x11), OP_VINT_D8_MASK, PPCVLE, PPCNONE, {D8, RA}},
+
 {"e_add16i",	OP(7),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, RA, SI}},
 {"e_la",	OP(7),		OP_MASK,    	PPCVLE,	PPCNONE,	{RT, D, RA0}},
 {"e_sub16i",	OP(7),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, RA, NSI}},
@@ -6499,7 +7437,7 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"se_cmpi",	SE_IM5(10,1),	SE_IM5_MASK,	PPCVLE,	PPCNONE,	{RX, UI5}},
 {"se_bmaski",	SE_IM5(11,0),	SE_IM5_MASK,	PPCVLE,	PPCNONE,	{RX, UI5}},
 {"se_andi",	SE_IM5(11,1),	SE_IM5_MASK,	PPCVLE,	PPCNONE,	{RX, UI5}},
- 
+
 {"e_lbz",	OP(12),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, D, RA0}},
 {"e_stb",	OP(13),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, D, RA0}},
 {"e_lha",	OP(14),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, D, RA0}},
@@ -6513,7 +7451,7 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"se_and",	SE_RR(17,2),	SE_RR_MASK,	PPCVLE,	PPCNONE,	{RX, RY}},
 {"se_and.",	SE_RR(17,3),	SE_RR_MASK,	PPCVLE,	PPCNONE,	{RX, RY}},
 {"se_li",	IM7(9),		IM7_MASK,	PPCVLE,	PPCNONE,	{RX, UI7}},
- 
+
 {"e_lwz",	OP(20),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, D, RA0}},
 {"e_stw",	OP(21),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, D, RA0}},
 {"e_lhz",	OP(22),		OP_MASK,	PPCVLE,	PPCNONE,	{RT, D, RA0}},
@@ -6583,7 +7521,9 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"e_bfl",	EBD15(30,8,BO32F,1), EBD15_MASK, PPCVLE, PPCNONE,	{BI32,B15}},
 {"e_bt",	EBD15(30,8,BO32T,0), EBD15_MASK, PPCVLE, PPCNONE,	{BI32,B15}},
 {"e_btl",	EBD15(30,8,BO32T,1), EBD15_MASK, PPCVLE, PPCNONE,	{BI32,B15}},
- 
+
+{ "e_sc",       ESC(31,0,36),   ESC_MASK,   PPCVLE,     PPCNONE, {ELEV}},
+
 {"e_cmph",	X(31,14),	X_MASK,		PPCVLE,	PPCNONE,	{CRD, RA, RB}},
 {"e_cmphl",	X(31,46),	X_MASK,		PPCVLE,	PPCNONE,	{CRD, RA, RB}},
 {"e_crandc",	XL(31,129),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BA, BB}},
@@ -6595,40 +7535,38 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"e_mcrf",	XL(31,16),	XL_MASK,	PPCVLE,	PPCNONE,	{CRD, CR}},
 {"e_slwi",	EX(31,112),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, SH}},
 {"e_slwi.",	EX(31,113),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, SH}},
- 
+
 {"e_crand",	XL(31,257),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BA, BB}},
- 
+
 {"e_rlw",	EX(31,560),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, RB}},
 {"e_rlw.",	EX(31,561),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, RB}},
- 
+
 {"e_crset",	XL(31,289),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BAT, BBA}},
 {"e_creqv",	XL(31,289),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BA, BB}},
- 
+
 {"e_rlwi",	EX(31,624),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, SH}},
 {"e_rlwi.",	EX(31,625),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, SH}},
- 
+
 {"e_crorc",	XL(31,417),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BA, BB}},
 
 {"e_crmove",	XL(31,449),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BA, BBA}},
 {"e_cror",	XL(31,449),	XL_MASK,	PPCVLE,	PPCNONE,	{BT, BA, BB}},
 
-{"mtmas1",	XSPR(31,467,625), XSPR_MASK,	PPCVLE,	PPCNONE,	{RS}},
-
 {"e_srwi",	EX(31,1136),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, SH}},
 {"e_srwi.",	EX(31,1137),	EX_MASK,	PPCVLE,	PPCNONE,	{RA, RS, SH}},
- 
+
 {"se_lbz",	SD4(8),		SD4_MASK,	PPCVLE,	PPCNONE,	{RZ, SE_SD, RX}},
- 
+
 {"se_stb",	SD4(9),		SD4_MASK,	PPCVLE,	PPCNONE,	{RZ, SE_SD, RX}},
- 
+
 {"se_lhz",	SD4(10),	SD4_MASK,	PPCVLE,	PPCNONE,	{RZ, SE_SDH, RX}},
- 
+
 {"se_sth",	SD4(11),	SD4_MASK,	PPCVLE,	PPCNONE,	{RZ, SE_SDH, RX}},
- 
+
 {"se_lwz",	SD4(12),	SD4_MASK,	PPCVLE,	PPCNONE,	{RZ, SE_SDW, RX}},
- 
+
 {"se_stw",	SD4(13),	SD4_MASK,	PPCVLE,	PPCNONE,	{RZ, SE_SDW, RX}},
- 
+
 {"se_bge",	EBD8IO(28,0,0),	EBD8IO3_MASK,	PPCVLE,	PPCNONE,	{B8}},
 {"se_bnl",	EBD8IO(28,0,0),	EBD8IO3_MASK,	PPCVLE,	PPCNONE,	{B8}},
 {"se_ble",	EBD8IO(28,0,1),	EBD8IO3_MASK,	PPCVLE,	PPCNONE,	{B8}},
@@ -6646,11 +7584,12 @@ const struct powerpc_opcode vle_opcodes[] = {
 {"se_bc",	BD8IO(28),	BD8IO_MASK,	PPCVLE,	PPCNONE,	{BO16, BI16, B8}},
 {"se_b",	BD8(58,0,0),	BD8_MASK,	PPCVLE,	PPCNONE,	{B8}},
 {"se_bl",	BD8(58,0,1),	BD8_MASK,	PPCVLE,	PPCNONE,	{B8}},
+
 };
 
 const int vle_num_opcodes =
   sizeof (vle_opcodes) / sizeof (vle_opcodes[0]);
-
+
 /* The macro table.  This is only used by the assembler.  */
 
 /* The expressions of the form (-x ! 31) & (x | 31) have the value 0
@@ -6704,18 +7643,880 @@ const struct powerpc_macro powerpc_macros[] = {
 {"clrlslwi", 4,	PPCCOM,	"rlwinm %0,%1,%3,(%2)-(%3),31-(%3)"},
 {"clrlslwi.",4, PPCCOM,	"rlwinm. %0,%1,%3,(%2)-(%3),31-(%3)"},
 
-{"e_extlwi", 4,	PPCVLE, "e_rlwinm %0,%1,%3,0,(%2)-1"},
-{"e_extrwi", 4,	PPCVLE, "e_rlwinm %0,%1,((%2)+(%3))&((%2)+(%3)<>32),32-(%2),31"},
-{"e_inslwi", 4,	PPCVLE, "e_rlwimi %0,%1,(-(%3)!31)&((%3)|31),%3,(%2)+(%3)-1"},
-{"e_insrwi", 4,	PPCVLE, "e_rlwimi %0,%1,32-((%2)+(%3)),%3,(%2)+(%3)-1"},
-{"e_rotlwi", 3,	PPCVLE, "e_rlwinm %0,%1,%2,0,31"},
-{"e_rotrwi", 3,	PPCVLE, "e_rlwinm %0,%1,(-(%2)!31)&((%2)|31),0,31"},
-{"e_slwi",   3,	PPCVLE, "e_rlwinm %0,%1,%2,0,31-(%2)"},
-{"e_srwi",   3,	PPCVLE, "e_rlwinm %0,%1,(-(%2)!31)&((%2)|31),%2,31"},
-{"e_clrlwi", 3,	PPCVLE, "e_rlwinm %0,%1,0,%2,31"},
-{"e_clrrwi", 3,	PPCVLE, "e_rlwinm %0,%1,0,0,31-(%2)"},
-{"e_clrlslwi",4, PPCVLE, "e_rlwinm %0,%1,%3,(%2)-(%3),31-(%3)"},
+{"e_extlwi",   4, PPCVLE, "e_rlwinm %0,%1,%3,0,(%2)-1"},
+{"e_extrwi",   4, PPCVLE, "e_rlwinm %0,%1,((%2)+(%3))&((%2)+(%3)<>32),32-(%2),31"},
+{"e_inslwi",   4, PPCVLE, "e_rlwimi %0,%1,(-(%3)!31)&((%3)|31),%3,(%2)+(%3)-1"},
+{"e_insrwi",   4, PPCVLE, "e_rlwimi %0,%1,32-((%2)+(%3)),%3,(%2)+(%3)-1"},
+{"e_rotlwi",   3, PPCVLE, "e_rlwinm %0,%1,%2,0,31"},
+{"e_rotrwi",   3, PPCVLE, "e_rlwinm %0,%1,(-(%2)!31)&((%2)|31),0,31"},
+{"e_slwi",     3, PPCVLE, "e_rlwinm %0,%1,%2,0,31-(%2)"},
+{"e_srwi",     3, PPCVLE, "e_rlwinm %0,%1,(-(%2)!31)&((%2)|31),%2,31"},
+{"e_clrlwi",   3, PPCVLE, "e_rlwinm %0,%1,0,%2,31"},
+{"e_clrrwi",   3, PPCVLE, "e_rlwinm %0,%1,0,0,31-(%2)"},
+{"e_clrlslwi", 4, PPCVLE, "e_rlwinm %0,%1,%3,(%2)-(%3),31-(%3)"},
+{"e_lmvgprw",  1, PPCVLE, "e_ldmvgprw %0"},
+{"e_lmvsprw",  1, PPCVLE, "e_ldmvsprw %0"},
+{"e_lmvsrrw",  1, PPCVLE, "e_ldmvsrrw %0"},
+{"e_lmvcsrrw", 1, PPCVLE, "e_ldmvcsrrw %0"},
+{"e_lmvdsrrw", 1, PPCVLE, "e_ldmvdsrrw %0"},
+
+{"nop",         0, PPCVLE,       "se_nop"},
+{"mtpid0",      1, PPCVLE,       "mtpid %0"},
+{"mfpid0",      1, PPCVLE,       "mfpid %0"},
+{"tbl_write",   1, BOOKE|PPCVLE, "mttbl %0"},
+{"tbu_write",   1, BOOKE|PPCVLE, "mttbu %0"},
+{"sprg4.r",     1, BOOKE|PPCVLE, "mfsprg4 %0"},
+{"sprg5.r",     1, BOOKE|PPCVLE, "mfsprg5 %0"},
+{"sprg6.r",     1, BOOKE|PPCVLE, "mfsprg6 %0"},
+{"sprg7.r",     1, BOOKE|PPCVLE, "mfsprg7 %0"},
+{"mftlbcfg0",   1, PPCVLE,       "mftlb0cfg %0"},
+{"mftlbcfg1",   1, PPCVLE,       "mftlb1cfg %0"},
+{"mfaltctxcr",  1, PPCVLE,       "mfiac8 %0"},
+{"mtaltctxcr",  1, PPCVLE,       "mtiac8 %0"},
+
+/* old SPE instructions have new names with the same opcodes */
+{"evsadd",      3, PPCSPE|PPCVLE, "efsadd %0,%1,%2"},
+{"evssub",      3, PPCSPE|PPCVLE, "efssub %0,%1,%2"},
+{"evsabs",      2, PPCSPE|PPCVLE, "efsabs %0,%1"},
+{"evsnabs",     2, PPCSPE|PPCVLE, "efsnabs %0,%1"},
+{"evsneg",      2, PPCSPE|PPCVLE, "efsneg %0,%1"},
+{"evsmul",	3, PPCSPE|PPCVLE, "efsmul %0,%1,%2"},
+{"evsdiv",	3, PPCSPE|PPCVLE, "efsdiv %0,%1,%2"},
+{"evscmpgt",	3, PPCSPE|PPCVLE, "efscmpgt %0,%1,%2"},
+{"evsgmplt",	3, PPCSPE|PPCVLE, "efscmplt %0,%1,%2"},
+{"evsgmpeq",    3, PPCSPE|PPCVLE, "efscmpeq %0,%1,%2"},
+{"evscfui",     2, PPCSPE|PPCVLE, "efscfui %0,%1"},
+{"evscfsi",     2, PPCSPE|PPCVLE, "efscfsi %0,%1"},
+{"evscfuf",     2, PPCSPE|PPCVLE, "efscfuf %0,%1"},
+{"evscfsf",     2, PPCSPE|PPCVLE, "efscfsf %0,%1"},
+{"evsctui",     2, PPCSPE|PPCVLE, "efsctui %0,%1"},
+{"evsctsi",     2, PPCSPE|PPCVLE, "efsctsi %0,%1"},
+{"evsctuf",     2, PPCSPE|PPCVLE, "efsctuf %0,%1"},
+{"evsctsf",     2, PPCSPE|PPCVLE, "efsctsf %0,%1"},
+{"evsctuiz",    2, PPCSPE|PPCVLE, "efsctuiz %0,%1"},
+{"evsctsiz",    2, PPCSPE|PPCVLE, "efsctsiz %0,%1"},
+{"evststgt",    3, PPCSPE|PPCVLE, "efststgt %0,%1,%2"},
+{"evststlt",    3, PPCSPE|PPCVLE, "efststlt %0,%1,%2"},
+{"evststeq",    3, PPCSPE|PPCVLE, "efststeq %0,%1,%2"},
+
+/* SPE2 instructions which just are mapped to SPE2 */
+{"evdotphsssi",  3, PPCSPE2, "evdotphssmi %0,%1,%2"},
+{"evdotphsssia", 3, PPCSPE2, "evdotphssmia %0,%1,%2"},
+{"evdotpwsssi",  3, PPCSPE2, "evdotpwssmi %0,%1,%2"},
+{"evdotpwsssia", 3, PPCSPE2, "evdotpwssmia %0,%1,%2"}
+
 };
 
 const int powerpc_num_macros =
   sizeof (powerpc_macros) / sizeof (powerpc_macros[0]);
+  
+
+/* SPE v2 instruction set from SPE2PIM Rev. 2 08/2011 */
+const struct powerpc_opcode spe2_opcodes[] = {
+{"evdotpwcssi",           VX (4, 128),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcsmi",           VX (4, 129),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfr",          VX (4, 130),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssf",           VX (4, 131),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmf",          VX (4, 136),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmf",         VX (4, 137),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfr",         VX (4, 138),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfr",        VX (4, 139),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmf",          VX (4, 140),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmf",         VX (4, 141),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfr",         VX (4, 142),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfr",        VX (4, 143),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssiaaw3",       VX (4, 144),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcsmiaaw3",       VX (4, 145),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfraaw3",      VX (4, 146),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfaaw3",       VX (4, 147),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfaa3",       VX (4, 152),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfaa3",      VX (4, 153),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfraa3",      VX (4, 154),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfraa3",     VX (4, 155),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfaa3",       VX (4, 156),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfaa3",      VX (4, 157),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfraa3",      VX (4, 158),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfraa3",     VX (4, 159),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssia",          VX (4, 160),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcsmia",          VX (4, 161),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfra",         VX (4, 162),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfa",          VX (4, 163),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfa",         VX (4, 168),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfa",        VX (4, 169),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfra",        VX (4, 170),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfra",       VX (4, 171),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfa",         VX (4, 172),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfa",        VX (4, 173),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfra",        VX (4, 174),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfra",       VX (4, 175),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssiaaw",        VX (4, 176),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcsmiaaw",        VX (4, 177),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfraaw",       VX (4, 178),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwcssfaaw",        VX (4, 179),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfaa",        VX (4, 184),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfaa",       VX (4, 185),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgasmfraa",       VX (4, 186),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgasmfraa",      VX (4, 187),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfaa",        VX (4, 188),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfaa",       VX (4, 189),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwgssmfraa",       VX (4, 190),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwxgssmfraa",      VX (4, 191),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssi",         VX (4, 256),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssi",         VX (4, 257),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssf",         VX (4, 258),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssf",         VX (4, 259),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcsmi",         VX (4, 264),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcsmi",         VX (4, 265),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfr",        VX (4, 266),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfr",        VX (4, 267),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssiaaw3",     VX (4, 272),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssiaaw3",     VX (4, 273),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfaaw3",     VX (4, 274),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfaaw3",     VX (4, 275),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcsmiaaw3",     VX (4, 280),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcsmiaaw3",     VX (4, 281),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfraaw3",    VX (4, 282),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfraaw3",    VX (4, 283),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssia",        VX (4, 288),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssia",        VX (4, 289),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfa",        VX (4, 290),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfa",        VX (4, 291),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcsmia",        VX (4, 296),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcsmia",        VX (4, 297),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfra",       VX (4, 298),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfra",       VX (4, 299),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssiaaw",      VX (4, 304),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssiaaw",      VX (4, 305),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfaaw",      VX (4, 306),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfaaw",      VX (4, 307),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcsmiaaw",      VX (4, 312),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcsmiaaw",      VX (4, 313),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphihcssfraaw",     VX (4, 314),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotplohcssfraaw",     VX (4, 315),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphausi",           VX (4, 320),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassi",           VX (4, 321),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasusi",          VX (4, 322),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassf",           VX (4, 323),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssf",           VX (4, 327),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphaumi",           VX (4, 328),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasmi",           VX (4, 329),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasumi",          VX (4, 330),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfr",          VX (4, 331),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphssmi",           VX (4, 333),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfr",          VX (4, 335),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphausiaaw3",       VX (4, 336),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassiaaw3",       VX (4, 337),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasusiaaw3",      VX (4, 338),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfaaw3",       VX (4, 339),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssiaaw3",       VX (4, 341),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfaaw3",       VX (4, 343),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphaumiaaw3",       VX (4, 344),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasmiaaw3",       VX (4, 345),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasumiaaw3",      VX (4, 346),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfraaw3",      VX (4, 347),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphssmiaaw3",       VX (4, 349),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfraaw3",      VX (4, 351),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphausia",          VX (4, 352),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassia",          VX (4, 353),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasusia",         VX (4, 354),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfa",          VX (4, 355),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfa",          VX (4, 359),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphaumia",          VX (4, 360),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasmia",          VX (4, 361),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasumia",         VX (4, 362),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfra",         VX (4, 363),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphssmia",          VX (4, 365),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfra",         VX (4, 367),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphausiaaw",        VX (4, 368),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassiaaw",        VX (4, 369),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasusiaaw",       VX (4, 370),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfaaw",        VX (4, 371),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssiaaw",        VX (4, 373),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfaaw",        VX (4, 375),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphaumiaaw",        VX (4, 376),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasmiaaw",        VX (4, 377),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphasumiaaw",       VX (4, 378),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphassfraaw",       VX (4, 379),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphssmiaaw",        VX (4, 381),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotphsssfraaw",       VX (4, 383),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgaumi",         VX (4, 384),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmi",         VX (4, 385),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasumi",        VX (4, 386),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmf",         VX (4, 387),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmi",         VX (4, 388),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmf",         VX (4, 389),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmi",        VX (4, 390),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmf",        VX (4, 391),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbaumi",           VX (4, 392),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasmi",           VX (4, 393),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasumi",          VX (4, 394),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmi",        VX (4, 398),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmf",        VX (4, 399),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgaumiaa3",      VX (4, 400),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmiaa3",      VX (4, 401),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasumiaa3",     VX (4, 402),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmfaa3",      VX (4, 403),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmiaa3",      VX (4, 404),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmfaa3",      VX (4, 405),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmiaa3",     VX (4, 406),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmfaa3",     VX (4, 407),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbaumiaaw3",       VX (4, 408),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasmiaaw3",       VX (4, 409),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasumiaaw3",      VX (4, 410),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmiaa3",     VX (4, 414),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmfaa3",     VX (4, 415),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgaumia",        VX (4, 416),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmia",        VX (4, 417),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasumia",       VX (4, 418),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmfa",        VX (4, 419),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmia",        VX (4, 420),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmfa",        VX (4, 421),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmia",       VX (4, 422),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmfa",       VX (4, 423),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbaumia",          VX (4, 424),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasmia",          VX (4, 425),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasumia",         VX (4, 426),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmia",       VX (4, 430),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmfa",       VX (4, 431),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgaumiaa",       VX (4, 432),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmiaa",       VX (4, 433),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasumiaa",      VX (4, 434),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgasmfaa",       VX (4, 435),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmiaa",       VX (4, 436),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hgssmfaa",       VX (4, 437),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmiaa",      VX (4, 438),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgasmfaa",      VX (4, 439),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbaumiaaw",        VX (4, 440),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasmiaaw",        VX (4, 441),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpbasumiaaw",       VX (4, 442),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmiaa",      VX (4, 446),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotp4hxgssmfaa",      VX (4, 447),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwausi",           VX (4, 448),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwassi",           VX (4, 449),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasusi",          VX (4, 450),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwaumi",           VX (4, 456),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasmi",           VX (4, 457),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasumi",          VX (4, 458),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwssmi",           VX (4, 461),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwausiaa3",        VX (4, 464),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwassiaa3",        VX (4, 465),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasusiaa3",       VX (4, 466),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwsssiaa3",        VX (4, 469),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwaumiaa3",        VX (4, 472),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasmiaa3",        VX (4, 473),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasumiaa3",       VX (4, 474),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwssmiaa3",        VX (4, 477),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwausia",          VX (4, 480),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwassia",          VX (4, 481),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasusia",         VX (4, 482),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwaumia",          VX (4, 488),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasmia",          VX (4, 489),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasumia",         VX (4, 490),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwssmia",          VX (4, 493),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwausiaa",         VX (4, 496),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwassiaa",         VX (4, 497),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasusiaa",        VX (4, 498),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwsssiaa",         VX (4, 501),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwaumiaa",         VX (4, 504),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasmiaa",         VX (4, 505),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwasumiaa",        VX (4, 506),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdotpwssmiaa",         VX (4, 509),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddib",               VX (4, 515),   VX_MASK, PPCSPE2, PPCNONE, {RD, UIMM, RB}},
+{"evaddih",               VX (4, 513),   VX_MASK, PPCSPE2, PPCNONE, {RD, UIMM, RB}},
+{"evsubifh",              VX (4, 517),   VX_MASK, PPCSPE2, PPCNONE, {RD, UIMM, RB}},
+{"evsubifb",              VX (4, 519),   VX_MASK, PPCSPE2, PPCNONE, {RD, UIMM, RB}},
+{"evabsb",                VX_RB_CONST(4, 520, 2),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evabsh",                VX_RB_CONST(4, 520, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evabsd",                VX_RB_CONST(4, 520, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evabss",                VX_RB_CONST(4, 520, 8),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evabsbs",               VX_RB_CONST(4, 520, 10), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evabshs",               VX_RB_CONST(4, 520, 12), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evabsds",               VX_RB_CONST(4, 520, 14), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegwo",               VX_RB_CONST(4, 521, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegb",                VX_RB_CONST(4, 521, 2),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegbo",               VX_RB_CONST(4, 521, 3),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegh",                VX_RB_CONST(4, 521, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegho",               VX_RB_CONST(4, 521, 5),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegd",                VX_RB_CONST(4, 521, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegs",                VX_RB_CONST(4, 521, 8),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegwos",              VX_RB_CONST(4, 521, 9),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegbs",               VX_RB_CONST(4, 521, 10), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegbos",              VX_RB_CONST(4, 521, 11), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evneghs",               VX_RB_CONST(4, 521, 12), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evneghos",              VX_RB_CONST(4, 521, 13), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evnegds",               VX_RB_CONST(4, 521, 14), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evextzb",               VX_RB_CONST(4, 522, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evextsbh",              VX_RB_CONST(4, 522, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evextsw",               VX_RB_CONST(4, 523, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndwh",               VX_RB_CONST(4, 524, 0),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndhb",               VX_RB_CONST(4, 524, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrnddw",               VX_RB_CONST(4, 524, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndwhus",             VX_RB_CONST(4, 524, 8),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndwhss",             VX_RB_CONST(4, 524, 9),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndhbus",             VX_RB_CONST(4, 524, 12), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndhbss",             VX_RB_CONST(4, 524, 13), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrnddwus",             VX_RB_CONST(4, 524, 14), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrnddwss",             VX_RB_CONST(4, 524, 15), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndwnh",              VX_RB_CONST(4, 524, 16), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndhnb",              VX_RB_CONST(4, 524, 20), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrnddnw",              VX_RB_CONST(4, 524, 22), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndwnhus",            VX_RB_CONST(4, 524, 24), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndwnhss",            VX_RB_CONST(4, 524, 25), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndhnbus",            VX_RB_CONST(4, 524, 28), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrndhnbss",            VX_RB_CONST(4, 524, 29), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrnddnwus",            VX_RB_CONST(4, 524, 30), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evrnddnwss",            VX_RB_CONST(4, 524, 31), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evcntlzh",              VX_RB_CONST(4, 525, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evcntlsh",              VX_RB_CONST(4, 526, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evpopcntb",             VX_RB_CONST(4, 526, 26), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"circinc",               VX (4, 528),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evunpkhibui",           VX_RB_CONST(4, 540, 0),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpkhibsi",           VX_RB_CONST(4, 540, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpkhihui",           VX_RB_CONST(4, 540, 2),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpkhihsi",           VX_RB_CONST(4, 540, 3),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpklobui",           VX_RB_CONST(4, 540, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpklobsi",           VX_RB_CONST(4, 540, 5),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpklohui",           VX_RB_CONST(4, 540, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpklohsi",           VX_RB_CONST(4, 540, 7),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpklohf",            VX_RB_CONST(4, 540, 8),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpkhihf",            VX_RB_CONST(4, 540, 9),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpklowgsf",          VX_RB_CONST(4, 540, 12), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evunpkhiwgsf",          VX_RB_CONST(4, 540, 13), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatsduw",             VX_RB_CONST(4, 540, 16), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatsdsw",             VX_RB_CONST(4, 540, 17), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatshub",             VX_RB_CONST(4, 540, 18), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatshsb",             VX_RB_CONST(4, 540, 19), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatuwuh",             VX_RB_CONST(4, 540, 20), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatswsh",             VX_RB_CONST(4, 540, 21), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatswuh",             VX_RB_CONST(4, 540, 22), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatuhub",             VX_RB_CONST(4, 540, 23), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatuduw",             VX_RB_CONST(4, 540, 24), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatuwsw",             VX_RB_CONST(4, 540, 25), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatshuh",             VX_RB_CONST(4, 540, 26), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatuhsh",             VX_RB_CONST(4, 540, 27), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatswuw",             VX_RB_CONST(4, 540, 28), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatswgsdf",           VX_RB_CONST(4, 540, 29), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatsbub",             VX_RB_CONST(4, 540, 30), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsatubsb",             VX_RB_CONST(4, 540, 31), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxhpuw",             VX_RB_CONST(4, 541, 0),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxhpsw",             VX_RB_CONST(4, 541, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxbpuh",             VX_RB_CONST(4, 541, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxbpsh",             VX_RB_CONST(4, 541, 5),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxwpud",             VX_RB_CONST(4, 541, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxwpsd",             VX_RB_CONST(4, 541, 7),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evminhpuw",             VX_RB_CONST(4, 541, 8),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evminhpsw",             VX_RB_CONST(4, 541, 9),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evminbpuh",             VX_RB_CONST(4, 541, 12), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evminbpsh",             VX_RB_CONST(4, 541, 13), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evminwpud",             VX_RB_CONST(4, 541, 14), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evminwpsd",             VX_RB_CONST(4, 541, 15), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evmaxmagws",            VX (4, 543),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsl",                  VX (4, 549),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsli",                 VX (4, 551),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evsplatie",             VX_RB_CONST (4, 553, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatib",             VX_RB_CONST (4, 553, 2),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatibe",            VX_RB_CONST (4, 553, 3),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatih",             VX_RB_CONST (4, 553, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatihe",            VX_RB_CONST (4, 553, 5),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatid",             VX_RB_CONST (4, 553, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatia",             VX_RB_CONST (4, 553, 16), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatiea",            VX_RB_CONST (4, 553, 17), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatiba",            VX_RB_CONST (4, 553, 18), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatibea",           VX_RB_CONST (4, 553, 19), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatiha",            VX_RB_CONST (4, 553, 20), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatihea",           VX_RB_CONST (4, 553, 21), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatida",            VX_RB_CONST (4, 553, 22), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfio",            VX_RB_CONST (4, 555, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfib",            VX_RB_CONST (4, 555, 2),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfibo",           VX_RB_CONST (4, 555, 3),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfih",            VX_RB_CONST (4, 555, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfiho",           VX_RB_CONST (4, 555, 5),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfid",            VX_RB_CONST (4, 555, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfia",            VX_RB_CONST (4, 555, 16), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfioa",           VX_RB_CONST (4, 555, 17), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfiba",           VX_RB_CONST (4, 555, 18), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfiboa",          VX_RB_CONST (4, 555, 19), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfiha",           VX_RB_CONST (4, 555, 20), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfihoa",          VX_RB_CONST (4, 555, 21), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evsplatfida",           VX_RB_CONST (4, 555, 22), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, SIMM}},
+{"evcmpgtdu",             VX_SPE_CRFD (4, 560, 1), VX_SPE_CRFD_MASK, PPCSPE2, PPCNONE, {CRFD, RA, RB}},
+{"evcmpgtds",             VX_SPE_CRFD (4, 561, 1), VX_SPE_CRFD_MASK, PPCSPE2, PPCNONE, {CRFD, RA, RB}},
+{"evcmpltdu",             VX_SPE_CRFD (4, 562, 1), VX_SPE_CRFD_MASK, PPCSPE2, PPCNONE, {CRFD, RA, RB}},
+{"evcmpltds",             VX_SPE_CRFD (4, 563, 1), VX_SPE_CRFD_MASK, PPCSPE2, PPCNONE, {CRFD, RA, RB}},
+{"evcmpeqd",              VX_SPE_CRFD (4, 564, 1), VX_SPE_CRFD_MASK, PPCSPE2, PPCNONE, {CRFD, RA, RB}},
+{"evswapbhilo",           VX (4, 568),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswapblohi",           VX (4, 569),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswaphhilo",           VX (4, 570),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswaphlohi",           VX (4, 571),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswaphe",              VX (4, 572),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswaphhi",             VX (4, 573),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswaphlo",             VX (4, 574),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evswapho",              VX (4, 575),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evinsb",                VX (4, 584), VX_MASK, PPCSPE2, PPCNONE, {RD, RA, DDD, BBB}},
+{"evxtrb",                VX (4, 586), VX_MASK, PPCSPE2, PPCNONE, {RD, RA, DDD, BBB}},
+{"evsplath",              VX_SPE2_HH (4, 588, 0, 0), VX_SPE2_HH_MASK, PPCSPE2, PPCNONE, {RD, RA, HH}},
+{"evsplatb",              VX_SPE2_SPLATB (4, 588, 2), VX_SPE2_SPLATB_MASK, PPCSPE2, PPCNONE, {RD, RA, BBB}},
+{"evinsh",                VX_SPE2_DDHH (4, 589, 0), VX_SPE2_DDHH_MASK, PPCSPE2, PPCNONE, {RD, RA, DD, HH}},
+{"evclrbe",               VX_SPE2_CLR (4, 590, 0), VX_SPE2_CLR_MASK, PPCSPE2, PPCNONE, {RD, RA, MMMM}},
+{"evclrbo",               VX_SPE2_CLR (4, 590, 1), VX_SPE2_CLR_MASK, PPCSPE2, PPCNONE, {RD, RA, MMMM}},
+{"evclrh",                VX_SPE2_CLR (4, 591, 1), VX_SPE2_CLR_MASK, PPCSPE2, PPCNONE, {RD, RA, MMMM}},
+{"evxtrh",                VX_SPE2_DDHH (4, 591, 0), VX_SPE2_DDHH_MASK, PPCSPE2, PPCNONE, {RD, RA, DD, HH}},
+{"evselbitm0",            VX (4, 592),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evselbitm1",            VX (4, 593),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evselbit",              VX (4, 594),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evperm",                VX (4, 596),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evperm2",               VX (4, 597),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evperm3",               VX (4, 598),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evxtrd",                VX (4, 600),   VX_OFF_SPE2_MASK, PPCSPE2, PPCNONE, {RD, RA, RB, VX_OFF_SPE2}},
+{"evsrbu",                VX (4, 608),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsrbs",                VX (4, 609),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsrbiu",               VX (4, 610),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evsrbis",               VX (4, 611),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evslb",                 VX (4, 612),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evrlb",                 VX (4, 613),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evslbi",                VX (4, 614),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evrlbi",                VX (4, 615),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evsrhu",                VX (4, 616),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsrhs",                VX (4, 617),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsrhiu",               VX (4, 618),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evsrhis",               VX (4, 619),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evslh",                 VX (4, 620),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evrlh",                 VX (4, 621),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evslhi",                VX (4, 622),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evrlhi",                VX (4, 623),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evsru",                 VX (4, 624),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsrs",                 VX (4, 625),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsriu",                VX (4, 626),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evsris",                VX (4, 627),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlvsl",                VX (4, 628),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlvsr",                VX (4, 629),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsroiu",               VX_SPE2_OCTET (4, 631, 0), VX_SPE2_OCTET_MASK, PPCSPE2, PPCNONE, {RD, RA, NNN}},
+{"evsrois",               VX_SPE2_OCTET (4, 631, 1), VX_SPE2_OCTET_MASK, PPCSPE2, PPCNONE, {RD, RA, NNN}},
+{"evsloi",                VX_SPE2_OCTET (4, 631, 2), VX_SPE2_OCTET_MASK, PPCSPE2, PPCNONE, {RD, RA, NNN}},
+{"evfssqrt",              VX_RB_CONST(4, 647, 0),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evfscfh",               VX_RA_CONST(4, 657, 4),  VX_RA_CONST_MASK, PPCSPE2, PPCNONE, {RD, RB}},
+{"evfscth",               VX_RA_CONST(4, 661, 4),  VX_RA_CONST_MASK, PPCSPE2, PPCNONE, {RD, RB}},
+{"evfsmax",               VX (4, 672),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsmin",               VX (4, 673),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsaddsub",            VX (4, 674),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfssubadd",            VX (4, 675),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfssum",               VX (4, 676),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsdiff",              VX (4, 677),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfssumdiff",           VX (4, 678),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsdiffsum",           VX (4, 679),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsaddx",              VX (4, 680),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfssubx",              VX (4, 681),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsaddsubx",           VX (4, 682),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfssubaddx",           VX (4, 683),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsmulx",              VX (4, 684),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsmule",              VX (4, 686),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evfsmulo",              VX (4, 687),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evldbx",                VX (4, 774),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evldb",                 VX (4, 775),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlhhsplathx",          VX (4, 778),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlhhsplath",           VX (4, 779),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwbsplatwx",          VX (4, 786),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbsplatw",           VX (4, 787),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwhsplatwx",          VX (4, 794),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwhsplatw",           VX (4, 795),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlbbsplatbx",          VX (4, 798),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlbbsplatb",           VX (4, 799),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evstdbx",               VX (4, 806),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstdb",                VX (4, 807),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evlwbex",               VX (4, 810),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbe",                VX (4, 811),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwboux",              VX (4, 812),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbou",               VX (4, 813),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwbosx",              VX (4, 814),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbos",               VX (4, 815),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evstwbex",              VX (4, 818),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwbe",               VX (4, 819),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwbox",              VX (4, 822),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwbo",               VX (4, 823),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwbx",               VX (4, 826),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwb",                VX (4, 827),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evsthbx",               VX (4, 830),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evsthb",                VX (4, 831),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evlddmx",               VX (4, 832),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlddu",                VX (4, 833),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evldwmx",               VX (4, 834),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evldwu",                VX (4, 835),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evldhmx",               VX (4, 836),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evldhu",                VX (4, 837),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evldbmx",               VX (4, 838),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evldbu",                VX (4, 839),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlhhesplatmx",         VX (4, 840),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlhhesplatu",          VX (4, 841),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlhhsplathmx",         VX (4, 842),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlhhsplathu",          VX (4, 843),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlhhousplatmx",        VX (4, 844),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlhhousplatu",         VX (4, 845),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlhhossplatmx",        VX (4, 846),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlhhossplatu",         VX (4, 847),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwhemx",              VX (4, 848),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwheu",               VX (4, 849),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwbsplatwmx",         VX (4, 850),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbsplatwu",          VX (4, 851),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwhoumx",             VX (4, 852),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwhouu",              VX (4, 853),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwhosmx",             VX (4, 854),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwhosu",              VX (4, 855),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwwsplatmx",          VX (4, 856),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwwsplatu",           VX (4, 857),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwhsplatwmx",         VX (4, 858),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwhsplatwu",          VX (4, 859),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwhsplatmx",          VX (4, 860),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwhsplatu",           VX (4, 861),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlbbsplatbmx",         VX (4, 862),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlbbsplatbu",          VX (4, 863),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evstddmx",              VX (4, 864),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstddu",               VX (4, 865),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstdwmx",              VX (4, 866),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstdwu",               VX (4, 867),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstdhmx",              VX (4, 868),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstdhu",               VX (4, 869),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstdbmx",              VX (4, 870),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstdbu",               VX (4, 871),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evlwbemx",              VX (4, 874),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbeu",               VX (4, 875),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwboumx",             VX (4, 876),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbouu",              VX (4, 877),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evlwbosmx",             VX (4, 878),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evlwbosu",              VX (4, 879),   VX_MASK, PPCSPE2, PPCNONE, {RD, RA, EVUIMM}},
+{"evstwhemx",             VX (4, 880),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwheu",              VX (4, 881),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwbemx",             VX (4, 882),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwbeu",              VX (4, 883),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwhomx",             VX (4, 884),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwhou",              VX (4, 885),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwbomx",             VX (4, 886),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwbou",              VX (4, 887),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwwemx",             VX (4, 888),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwweu",              VX (4, 889),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwbmx",              VX (4, 890),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwbu",               VX (4, 891),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evstwwomx",             VX (4, 892),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evstwwou",              VX (4, 893),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evsthbmx",              VX (4, 894),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, RB}},
+{"evsthbu",               VX (4, 895),   VX_MASK, PPCSPE2, PPCNONE, {RS, RA, EVUIMM}},
+{"evmhusi",               VX (4, 1024),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhssi",               VX (4, 1025),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhsusi",              VX (4, 1026),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhssf",               VX (4, 1028),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhumi",               VX (4, 1029),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhssfr",              VX (4, 1030),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhesumi",             VX (4, 1034),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhosumi",             VX (4, 1038),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbeumi",              VX (4, 1048),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesmi",              VX (4, 1049),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesumi",             VX (4, 1050),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmboumi",              VX (4, 1052),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosmi",              VX (4, 1053),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosumi",             VX (4, 1054),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhesumia",            VX (4, 1066),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhosumia",            VX (4, 1070),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbeumia",             VX (4, 1080),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesmia",             VX (4, 1081),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesumia",            VX (4, 1082),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmboumia",             VX (4, 1084),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosmia",             VX (4, 1085),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosumia",            VX (4, 1086),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwusiw",              VX (4, 1088),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwssiw",              VX (4, 1089),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfr",             VX (4, 1094),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfr",           VX (4, 1110),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmf",            VX (4, 1111),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfr",           VX (4, 1118),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmf",            VX (4, 1119),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfra",            VX (4, 1126),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfra",          VX (4, 1142),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfa",           VX (4, 1143),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfra",          VX (4, 1150),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfa",           VX (4, 1151),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddusiaa",            VX_RB_CONST(4, 1152, 0), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evaddssiaa",            VX_RB_CONST(4, 1153, 0), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsubfusiaa",           VX_RB_CONST(4, 1154, 0), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsubfssiaa",           VX_RB_CONST(4, 1155, 0), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evaddsmiaa",            VX_RB_CONST(4, 1156, 0), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsubfsmiaa",           VX_RB_CONST(4, 1158, 0), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evaddh",                VX (4, 1160),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhss",              VX (4, 1161),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfh",               VX (4, 1162),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhss",             VX (4, 1163),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhx",               VX (4, 1164),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhxss",             VX (4, 1165),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhx",              VX (4, 1166),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhxss",            VX (4, 1167),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddd",                VX (4, 1168),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evadddss",              VX (4, 1169),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfd",               VX (4, 1170),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfdss",             VX (4, 1171),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddb",                VX (4, 1172),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddbss",              VX (4, 1173),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfb",               VX (4, 1174),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfbss",             VX (4, 1175),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfh",            VX (4, 1176),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfhss",          VX (4, 1177),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddh",            VX (4, 1178),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddhss",          VX (4, 1179),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfhx",           VX (4, 1180),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfhxss",         VX (4, 1181),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddhx",           VX (4, 1182),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddhxss",         VX (4, 1183),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evadddus",              VX (4, 1184),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddbus",              VX (4, 1185),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfdus",             VX (4, 1186),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfbus",             VX (4, 1187),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwus",              VX (4, 1188),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwxus",             VX (4, 1189),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwus",             VX (4, 1190),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwxus",            VX (4, 1191),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evadd2subf2h",          VX (4, 1192),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evadd2subf2hss",        VX (4, 1193),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubf2add2h",          VX (4, 1194),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubf2add2hss",        VX (4, 1195),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhus",              VX (4, 1196),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhxus",             VX (4, 1197),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhus",             VX (4, 1198),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhxus",            VX (4, 1199),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwss",              VX (4, 1201),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwss",             VX (4, 1203),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwx",               VX (4, 1204),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwxss",             VX (4, 1205),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwx",              VX (4, 1206),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwxss",            VX (4, 1207),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfw",            VX (4, 1208),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfwss",          VX (4, 1209),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddw",            VX (4, 1210),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddwss",          VX (4, 1211),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfwx",           VX (4, 1212),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddsubfwxss",         VX (4, 1213),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddwx",           VX (4, 1214),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfaddwxss",         VX (4, 1215),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmar",                 VX_SPE2_EVMAR (4, 1220), VX_SPE2_EVMAR_MASK, PPCSPE2, PPCNONE, {RD}},
+{"evsumwu",               VX_RB_CONST(4, 1221, 0),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsumws",               VX_RB_CONST(4, 1221, 1),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum4bu",              VX_RB_CONST(4, 1221, 2),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum4bs",              VX_RB_CONST(4, 1221, 3),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hu",              VX_RB_CONST(4, 1221, 4),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hs",              VX_RB_CONST(4, 1221, 5),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evdiff2his",            VX_RB_CONST(4, 1221, 6),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2his",             VX_RB_CONST(4, 1221, 7),  VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsumwua",              VX_RB_CONST(4, 1221, 16), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsumwsa",              VX_RB_CONST(4, 1221, 17), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum4bua",             VX_RB_CONST(4, 1221, 18), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum4bsa",             VX_RB_CONST(4, 1221, 19), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hua",             VX_RB_CONST(4, 1221, 20), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hsa",             VX_RB_CONST(4, 1221, 21), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evdiff2hisa",           VX_RB_CONST(4, 1221, 22), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hisa",            VX_RB_CONST(4, 1221, 23), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsumwuaa",             VX_RB_CONST(4, 1221, 24), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsumwsaa",             VX_RB_CONST(4, 1221, 25), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum4buaaw",           VX_RB_CONST(4, 1221, 26), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum4bsaaw",           VX_RB_CONST(4, 1221, 27), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2huaaw",           VX_RB_CONST(4, 1221, 28), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hsaaw",           VX_RB_CONST(4, 1221, 29), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evdiff2hisaaw",         VX_RB_CONST(4, 1221, 30), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evsum2hisaaw",          VX_RB_CONST(4, 1221, 31), VX_RB_CONST_MASK, PPCSPE2, PPCNONE, {RD, RA}},
+{"evdivwsf",              VX (4, 1228),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdivwuf",              VX (4, 1229),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdivs",                VX (4, 1230),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdivu",                VX (4, 1231),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwegsi",            VX (4, 1232),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwegsf",            VX (4, 1233),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwegsi",           VX (4, 1234),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwegsf",           VX (4, 1235),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwogsi",            VX (4, 1236),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddwogsf",            VX (4, 1237),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwogsi",           VX (4, 1238),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfwogsf",           VX (4, 1239),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhhiuw",            VX (4, 1240),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhhisw",            VX (4, 1241),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhhiuw",           VX (4, 1242),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhhisw",           VX (4, 1243),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhlouw",            VX (4, 1244),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evaddhlosw",            VX (4, 1245),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhlouw",           VX (4, 1246),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsubfhlosw",           VX (4, 1247),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhesusiaaw",          VX (4, 1282),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhosusiaaw",          VX (4, 1286),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhesumiaaw",          VX (4, 1290),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhosumiaaw",          VX (4, 1294),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbeusiaah",           VX (4, 1296),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbessiaah",           VX (4, 1297),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesusiaah",          VX (4, 1298),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbousiaah",           VX (4, 1300),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbossiaah",           VX (4, 1301),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosusiaah",          VX (4, 1302),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbeumiaah",           VX (4, 1304),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesmiaah",           VX (4, 1305),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesumiaah",          VX (4, 1306),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmboumiaah",           VX (4, 1308),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosmiaah",           VX (4, 1309),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosumiaah",          VX (4, 1310),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlusiaaw3",          VX (4, 1346),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlssiaaw3",          VX (4, 1347),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfraaw3",         VX (4, 1348),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfaaw3",          VX (4, 1349),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfraaw",          VX (4, 1350),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfaaw",           VX (4, 1351),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlumiaaw3",          VX (4, 1354),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlsmiaaw3",          VX (4, 1355),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwusiaa",             VX (4, 1360),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwssiaa",             VX (4, 1361),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfraa",         VX (4, 1366),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfaa",          VX (4, 1367),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfraa",         VX (4, 1374),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfaa",          VX (4, 1375),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhesusianw",          VX (4, 1410),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhosusianw",          VX (4, 1414),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhesumianw",          VX (4, 1418),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmhosumianw",          VX (4, 1422),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbeusianh",           VX (4, 1424),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbessianh",           VX (4, 1425),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesusianh",          VX (4, 1426),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbousianh",           VX (4, 1428),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbossianh",           VX (4, 1429),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosusianh",          VX (4, 1430),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbeumianh",           VX (4, 1432),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesmianh",           VX (4, 1433),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbesumianh",          VX (4, 1434),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmboumianh",           VX (4, 1436),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosmianh",           VX (4, 1437),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmbosumianh",          VX (4, 1438),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlusianw3",          VX (4, 1474),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlssianw3",          VX (4, 1475),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfranw3",         VX (4, 1476),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfanw3",          VX (4, 1477),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfranw",          VX (4, 1478),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwhssfanw",           VX (4, 1479),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlumianw3",          VX (4, 1482),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwlsmianw3",          VX (4, 1483),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwusian",             VX (4, 1488),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwssian",             VX (4, 1489),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfran",         VX (4, 1494),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwehgsmfan",          VX (4, 1495),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfran",         VX (4, 1502),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmwohgsmfan",          VX (4, 1503),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evseteqb",              VX (4, 1536),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evseteqb.",             VX (4, 1537),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evseteqh",              VX (4, 1538),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evseteqh.",             VX (4, 1539),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evseteqw",              VX (4, 1540),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evseteqw.",             VX (4, 1541),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgthu",             VX (4, 1544),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgthu.",            VX (4, 1545),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgths",             VX (4, 1546),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgths.",            VX (4, 1547),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtwu",             VX (4, 1548),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtwu.",            VX (4, 1549),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtws",             VX (4, 1550),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtws.",            VX (4, 1551),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtbu",             VX (4, 1552),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtbu.",            VX (4, 1553),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtbs",             VX (4, 1554),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetgtbs.",            VX (4, 1555),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltbu",             VX (4, 1556),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltbu.",            VX (4, 1557),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltbs",             VX (4, 1558),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltbs.",            VX (4, 1559),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetlthu",             VX (4, 1560),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetlthu.",            VX (4, 1561),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetlths",             VX (4, 1562),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetlths.",            VX (4, 1563),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltwu",             VX (4, 1564),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltwu.",            VX (4, 1565),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltws",             VX (4, 1566),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsetltws.",            VX (4, 1567),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsaduw",               VX (4, 1568),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsadsw",               VX (4, 1569),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad4ub",              VX (4, 1570),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad4sb",              VX (4, 1571),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad2uh",              VX (4, 1572),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad2sh",              VX (4, 1573),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsaduwa",              VX (4, 1576),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsadswa",              VX (4, 1577),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad4uba",             VX (4, 1578),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad4sba",             VX (4, 1579),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad2uha",             VX (4, 1580),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad2sha",             VX (4, 1581),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evabsdifuw",            VX (4, 1584),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evabsdifsw",            VX (4, 1585),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evabsdifub",            VX (4, 1586),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evabsdifsb",            VX (4, 1587),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evabsdifuh",            VX (4, 1588),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evabsdifsh",            VX (4, 1589),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsaduwaa",             VX (4, 1592),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsadswaa",             VX (4, 1593),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad4ubaaw",           VX (4, 1594),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad4sbaaw",           VX (4, 1595),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad2uhaaw",           VX (4, 1596),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evsad2shaaw",           VX (4, 1597),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkshubs",             VX (4, 1600),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkshsbs",             VX (4, 1601),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswuhs",             VX (4, 1602),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswshs",             VX (4, 1603),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkuhubs",             VX (4, 1604),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkuwuhs",             VX (4, 1605),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswshilvs",          VX (4, 1606),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswgshefrs",         VX (4, 1607),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswshfrs",           VX (4, 1608),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswshilvfrs",        VX (4, 1609),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpksdswfrs",           VX (4, 1610),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpksdshefrs",          VX (4, 1611),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkuduws",             VX (4, 1612),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpksdsws",             VX (4, 1613),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evpkswgswfrs",          VX (4, 1614),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilveh",               VX (4, 1616),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilveoh",              VX (4, 1617),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilvhih",              VX (4, 1618),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilvhiloh",            VX (4, 1619),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilvloh",              VX (4, 1620),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilvlohih",            VX (4, 1621),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilvoeh",              VX (4, 1622),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evilvoh",               VX (4, 1623),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlveb",               VX (4, 1624),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlveh",               VX (4, 1625),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlveob",              VX (4, 1626),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlveoh",              VX (4, 1627),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlvob",               VX (4, 1628),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlvoh",               VX (4, 1629),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlvoeb",              VX (4, 1630),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evdlvoeh",              VX (4, 1631),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxbu",               VX (4, 1632),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxbs",               VX (4, 1633),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxhu",               VX (4, 1634),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxhs",               VX (4, 1635),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxwu",               VX (4, 1636),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxws",               VX (4, 1637),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxdu",               VX (4, 1638),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmaxds",               VX (4, 1639),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminbu",               VX (4, 1640),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminbs",               VX (4, 1641),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminhu",               VX (4, 1642),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminhs",               VX (4, 1643),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminwu",               VX (4, 1644),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminws",               VX (4, 1645),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evmindu",               VX (4, 1646),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evminds",               VX (4, 1647),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgwu",               VX (4, 1648),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgws",               VX (4, 1649),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgbu",               VX (4, 1650),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgbs",               VX (4, 1651),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavghu",               VX (4, 1652),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavghs",               VX (4, 1653),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgdu",               VX (4, 1654),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgds",               VX (4, 1655),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgwur",              VX (4, 1656),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgwsr",              VX (4, 1657),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgbur",              VX (4, 1658),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgbsr",              VX (4, 1659),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavghur",              VX (4, 1660),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavghsr",              VX (4, 1661),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgdur",              VX (4, 1662),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+{"evavgdsr",              VX (4, 1663),  VX_MASK, PPCSPE2, PPCNONE, {RD, RA, RB}},
+
+};
+
+const int spe2_num_opcodes =
+  sizeof (spe2_opcodes) / sizeof (spe2_opcodes[0]);
